external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function string 20 GetMenuCode(string);

external inner function Boolean HasCharts();

external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabel_ENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner function string 255 VATZoneNameENG();

external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();

external inner function Boolean HasBase2();
external inner function Boolean HasExtTax();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasItemClassification();
external inner function Boolean HasLanguages();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasObjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();

external inner function Boolean HasModCRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModNL();
external inner function Boolean HasModPO();
external inner function Boolean HasModProd();
external inner function Boolean HasModRest();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasIntegratedNL();
external inner function real VATZoneButtonsLabelsLIT(real,real,real,real);
external inner function string 255 VATZoneNameLIT();
external inner function string 255 VATZoneEditFieldLabel_LIT(Integer);


SetLangMode(LangLithuanian,"LIT",2);

window SVOSerDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,t,v,vs;
  WindowBegin("Žinomi serijiniai nr.",SVOSerDClass,CGview,SVOSerView);
  SetWRect(20,80,552,600);
  UseView(SVOSerVc);
  v = 6; vs = 20; h = 120; h2 = 290;
  Tile(0,90,false,"",ItemCode);
  EditField(h,v, 100,"Prekė",Normal,ItemCode,false,INSClass);
  EditField(h2,v,-40,"Ser. nr.",Normal,SerialNr,false,0);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,ItemName,false,0);
  EditField(h,v+=vs,100,"Pirkėjas",Normal,CustCode,false,CUSClass);
  EditField(h2,v,-40,"Pavadinimas",Normal,CustName,false,0);
  h2 = 350;
  TileButton(1,"Pagrindinis");
  TileButton(2,"Garantijos informacija");
  TileButton(3,"Dalys detaliai");
  Tile(1,170,false,"",SoldDate);
  EditField(h,v=6,110,"Parduota",Normal,SoldDate,false,PasteCurDate);
  EditField(h2,v,-40,"Garantijos vienetas",Normal,WarrantyUntil,false,PasteCurDate);
  EditField(h,v+=vs,110,"Pardavimų kaina",Normal,SalesPrice,true,0);
  EditField(h2,v,-40,"Savikaina",Normal,CostPrice,true,0);
  EditField(h,v+=vs,110,"Tiekėjas",Normal,VECode,false,VESClass);
  EditField(h2,v,-40,"Motinos Nr.",Normal,MotherNr,false,SVOSerSClass);
  EditField(h,v+=vs,110,"Paskutinė GSX užklausa",Normal,LastGSXQuery,true,0);
  EditField(h2,v,-40,"Price List",Normal,PLCode,false,PLDefSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 201815:26:18

  Tile(2,450,false,"",ProductDescription);

  EditField(h,v=6,-40,"Produkto apraš.",Normal,ProductDescription,false,0);
  EditField(h,v+=vs,-40,"Nustat. aprašymą",Normal,ConfigDescription,false,0);
  EditField(h,v+=vs,110,"Pirkimo šalis",Normal,PurchaseCountry,false,0);
  EditField(h2,v,-40,"Pirkimo data",Normal,EstimatedPurchaseDate,true,PasteCurDate);
  CheckBox(h,v+=vs,0,"Asmeniniai",Personalized);

  CheckBox(h,v+=vs,0,"Globali garantija",GlobalWarranty);
  CheckBox(h2,v,0,"Apribota garantija",LimitedWarranty);
  EditField(h,v+=vs,-40,"Garantijos būklė",Normal,WarrantyStatus,false,0);

  EditField(h,v+=vs,110,"Registracijos data",Normal,RegistrationDate,true,PasteCurDate);
  EditField(h2,v,-40,"Garantijos nuor. nr.",Normal,WarrantyRefNo,false,0);

  EditField(h,v+=vs,110,"Garantijos forma",Normal,CoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Garantijos vienetas",Normal,WarrantyUntil,true,PasteCurDate);
  EditField(h,v+=vs,110,"Onsite forma",Normal,OnsiteStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Onsite vienetas",Normal,OnsiteEndDate,true,PasteCurDate);
  EditField(h,v+=vs,110,"CS kodas",Normal,CSCode,false,0);
  EditField(h2,v,-40,"CS tipas",Normal,CSType,false,0);

  CheckBox(h,v+=vs,0,"Powertrain",PowerTrainFlag); //!!SAMETRANSLATION
  CheckBox(h,v+=vs,0,"TriCare",TriCareFlag); //!!SAMETRANSLATION
  CheckBox(h2,v,0,"Ecorath",EcorathFlag); //!!SAMETRANSLATION

  EditField(h,v+=vs,110,"Kontrakto tipas",Normal,ContractType,false,0);
  EditField(h,v+=vs,110,"Kontrakto forma",Normal,ContractCoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Kontrakto vienetas",Normal,ContractCoverageEndDate,true,PasteCurDate);
  EditField(h,v+=vs,-40,"SLA grupės apraš.",Normal,SLAGroupDesc,false,0);

  CheckBox(h,v+=vs,0,"Darbas padengiamas",LaborCovered);
  CheckBox(h2,v,0,"Pusiau padengtas",PartCovered);

  EditField(h,v+=vs,-40,"Paveikslėlis",Normal,ImageURL,false,0);
  EditField(h,v+=vs,-40,"Išplėstas vaizdas",Normal,ExplodedViewURL,false,0);
  EditField(h,v+=vs,-40,"Rankinis",Normal,ManualURL,false,0);

  EditField(h,v+=vs,110,"Sutarites apim. pradžia",Normal,ContractCoverageStartDate,true,PasteCurDate); 
  EditField(h2,v,-40,"Sutarties apim. pabaiga",Normal,ContractCoverageEndDate,true,PasteCurDate); 

  EditField(h,v+=vs,110,"APP Agr. Nr.",Normal,APPAgreementNumber,true,0);  
  EditField(h2,v,-40,"APP Iš viso",Normal,APPTotalFromOrder,true,0); 

  EditField(h,v+=vs,-40,"APP pranešimas",Normal,APPCoverageDurationStatement,true,0); 

  Tile(3,200,false,"",Math);
  v = 24;
  MatrixBegin(20,v,-40,-10,-,999);
  Flip(0);
  MatCol(t=1,32,"Dalies nr.",0,PartNumber,false,0);
  Flip(1);
  MatCol(t,120,"Dalies apr.",0,PartDescription,false,0);
  MatCol(t,-180,"Savikaina",0,StockPrice,true,0);
  MatCol(t,-90,"Pakeitimo kaina",0,ExchangePrice,true,0);
  Flip(2);
  MatCol(t,120,"Dalies tipas",0,PartType,false,0);
  MatCol(t,-190,"Komp. kodas",0,ComponentCode,false,0);
  MatCol(t,-110,"Orig. dal. Nr.",0,OriginalPartNumber,false,0);
  Flip(3);
  MatCol(t,120,"EEE kodas",0,EEECode,false,0);
  MatCol(t,-130,"Darbo eilė",0,LaborTier,false,0);
  MatCol(t,-40,"Serija",0,IsSerialized,false,0);
  EndMatrix;
  vs = 20;
  v = 18; VTab(-25,v,-6,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-25,v,-6,v+vs,ToolFlip,2,"B");
    v=v+vs; VTab(-25,v,-6,v+vs,ToolFlip,3,"C");
  SpecialMenu("Atidaryti pasirinktą nuorodą tinklapyje",'w',1,"OpenLinkSVOSerDsm");
//    SpecialMenu("Atnaujinti dalių kainas iš garantinių čekių",' ',2,"PartsLookupSVOSerDsm");
      SpecialMenu("Ieškoti dalių",'l',2,"PartsLookupSVOSerDsm");
  SpecialMenu("Serijinio numerio istorija",'h',3,"SerHistSVOSerDsm"); 
  EndWindow;
end;

window WSDClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer rn,tilenr,flipnr,f;
  
  WindowBegin("Darbo kortelė",WSDClass,CGview,WSView); 
  SetWRect(20,80,750,460);
  Sizeable(512,-1,0,0);
  UseView(WSVc);
  FormName(WSForm);
  h1 = 75;h2 = 290; h3 = 470; vs = 20;
  Tile(0,70,false,"",CustCode); 
  EditField(75,vm=(v=6),95,"Nr.",Normal,SerNr,false,TSerSClass); 
  EditField(75,v+=20,95,"Pirkėjas",Normal,CustCode,false,CUSClass); 
  EditField(h=240,v=vm,-40,"Vardas",Normal,Addr0,false,0); 
  v = v+vs;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  tilenr = 1;
  TileButton(tilenr,"Data"); tilenr = tilenr + 1;
  TileButton(tilenr,"Prekės"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Valiuta"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Kontaktas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Komentaras"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Darbuotojas",Normal,EMCode,false,UserSClass); 
  EditField(h1,v+=vs,82,"Data",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin 
    EditField(h1,v+=vs,82,"Patalpa",Normal,Location,false,LocationSClass); 
  end;
  EditField(h1,v+=vs,82,"Trumpas",Normal,ACShort,false,ACShortSClass); 
  EditField(h2,v=vm,135,"Darbuotojo vardas",Normal,EMName,false,0); 
  EditField(h2,v+=vs,135,"Kont. asmuo",Normal,CustContact,false,ContactSClass); 
  EditField(h2,v+=vs,135,"Savik. sąsk.",Normal,CostAcc,false,AccSClass); 
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Objektai",Normal,Objects,false,ObjSClass);
  end; 
  EditField(h3,v=vm,82,"Pasl. užs. Nr.",Normal,SVONr,false,0); 
  if (HasModSVO) then begin
    EditField(h3,v+=vs,82,"Darbo užs. Nr.",Normal,WONr,false,0);
  end;
  if (HasModIN) then begin
    CheckBox(h4,v=vm,0,"Atnaujinti sandėlį",UpdStockFlag); 
  end;
  if (IsEnterprise) then begin
    CheckBox(h4,v+=16,0,"Rezervuota",PrelOK); 
  end;
/* What is this???, It can be changed by the user and what if half is invoiced ?? */
//  CheckBox(h4,v+=16,0,"Invoiced",InvFlag);
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(410,-41,95,"PVM",ViewOnly ,Sum3,true,0); 
  EditField(-150,-41,95,"Tarpinė suma",ViewOnly ,Sum1,true,0); 
  EditField(-150,-21,95,"VISO",ViewOnly ,Sum4,true,0); 
  v = 24;
  MatrixBegin(3,v,-50,-40,WSRowType,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=1,32,"Prekė",0,ArtCode,false,INSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
	MatCol(t,94,"Pradžios laikas",0,sTime,true,PasteCurTime);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. о 16:58:48
	MatCol(t,150,"Pabaigos laikas",0,eTime,true,PasteCurTime);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. о 16:58:50
  MatCol(t,205,"Kiekis",0,Quant,true,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 November 2018 16:45:45
  EnterSkip(ArtCode);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,244,"Aprašymas",0,Spec,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 November 2018 16:45:49
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-255,"Vnt. kaina",0,Price,true,0); 
    MatCol(t,-165,"%",0,vRebate,true,0); 
    MatCol(t,-130,"Suma",0,Sum,true,0); 
    MatCol(1,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);  //!!SAMETRANSLATION
  end else begin
  MatCol(t,-225,"Vnt. kaina",0,Price,true,0);
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Suma",0,Sum,true,0);
    MatCol(1,-30,"PVM kd.",0,VATCode,false,VATCodeSClass); 
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-225,"Prekės tipas",0,ItemType,false,SetSClass);
  MatCol(t,-150,"Pagrindinis nr.",0,MotherNr,false,SerialNrSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
  if (HasSerialNumbers) then begin
    MatCol(t,-225,"Serijinis nr.",0,SerialNr,false,SerialNrSClass);
  end;
  if (HasModProd) then begin
    MatCol(t,-90,"Ruošinys",0,Recepy,false,RecSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
  MatCol(t,-345,"Grąžinta",0,Returned,true,0); 
  MatCol(t,-285,"Faktūruota",0,Invd,true,0); 
  MatCol(t,-225,"FIFO",0,FIFO,false,0); //!!SAMETRANSLATION
  MatCol(t,-125,"Eilutės FIFO",0,FIFORowVal,false,0);
  if (HasModNL) then begin
    Flip(flipnr); flipnr = flipnr + 1;
		MatCol(t=1,144,"Aprašymas",0,Spec,false,0);
		MatCol(t,-340,"Trumpas",0,ACShort,false,ACShortSClass);
		MatCol(t,-270,"Pard. sąsk.",0,SalesAcc,false,AccSClass);
		MatCol(t,-200,"Savik. sąsk.",0,CostAcc,false,AccSClass);
		if (HasObjects) then begin
			MatCol(t,-130,"Objektai",0,Objects,false,ObjSClass);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Prekės būklė",'I','I',0,"ItemStatusWSDsm");
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1)); //!!SAMETRANSLATION
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,CurncyCode); tilenr = tilenr + 1;
  vs = 20;
  EditField(h=110,v=6,50,"Valiuta",ViewOnly,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
  EditField(h,v+vs,50,"Baz. val. 1",ViewOnly,BaseRate1,true,0);
      end else begin
        EditField(h,v+vs,50,"Baz. valiuta",ViewOnly,BaseRate1,true,0);
      end;
      if (HasBase2) then begin
  EditField(h,v+(vs*2),50,"Baz. val. 2",ViewOnly,BaseRate2,true,0);  
      end;  
  EditField(h2=295,v,50,"Kursas",ViewOnly,FrRate,true,0);
      if (HasBase2) then begin
  RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Baz. val. 1",false); //!!SAMETRANSLATION
  RateField(h3,v+=vs,50,":",ViewOnly,"ToRateB2",true,h3+60,v+14,"Baz. val. 2",false);    //!!SAMETRANSLATION
      end else begin
        RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Baz. val.",false); //!!SAMETRANSLATION
      end;
    end else begin
      EditField(h,v+=vs,50,"Baz. val. 1",ViewOnly,BaseRate1,true,0);
      EditField(h,v+=vs,50,"Baz. val. 2",ViewOnly,BaseRate2,true,0);
    end;
  end; 
  Tile(tilenr,130,false,tilenr,Phone); tilenr = tilenr + 1;
  vs = 20;h = 75;h2 = 300;
  EditField(h,vm=(v=6),150,"Tel. nr.",Normal,Phone,false,0);
  EditField(h,v+=vs,150,"Fakso nr.",Normal,Fax,false,0);
  if (IsEnterprise) then begin
    EditField(h,v+=vs,200,"Faktūra kam",Normal,InvoiceToCode,false,CUSClass);
  end;
  if (HasLanguages) then begin 
    EditField(h,v+=vs,80,"Kalba",Normal,LangCode,false,LangSClass);
  end;
  if (HasPriceLists) then begin
    EditField(h,v+=vs,80,"Kainoraštis",Normal,PriceList,false,PLDefSClass);
	end;
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelslit(h2,v=vm+vs,170,16);
  end;
  Tile(tilenr,90,false,tilenr,Comment1); tilenr = tilenr + 1; 
  vs = 20;
  EditField(h=75,v=6,-20,"Komentaras",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment4,false,0);
  EnterSkip(TransDate);
  if (HasModSVO) then begin
    SpecialMenu("Atidaryti darbo užsakymą",' ',0,"OpenWOFromWSDsm");
  end;
  if (HasIntegratedNL) then begin
  SpecialMenu("Atidaryti D/K operaciją",'t',1,"OpenTRFromWS");
	end;
  SpecialMenu("Prekės paieška",'f',3,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
  	SpecialMenu("Atidaryti mokesčių matricą",' ',25,"OpenVatMatrixWSDsm");  
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',4,"ActFromWSDsm");
  end;
  if (HasModPO) then begin
    SpecialMenu("Sukurti pirkimo užsakymą",' ',5,"POFromWSDsm");
  end;
  if (HasReturnedGoods) then begin
    SpecialMenu("Sukurti prekių grąžinimą",'B',6,"RetFromWSDsm"); 
  end;
//  SpecMenuItem("Darbo kortelės būklė",'r',4);
  EndWindow;
end;

window INDClass:8
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  LongInt bm,lt,rt,tp;
  
  BlockLoad(CYb);
  WindowBegin("Prekė",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Paveiksliukas");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code); 
  end else begin
  Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"Nr.",Normal,Code,false,0);
  EditField(h2,v,80,"Grupė",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Aprašymas",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternatyvus kodas",Normal,AlternativeCode,false,0); 
  end;
  tilenr = 1;
  TileButton(tilenr,"Kainos"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"Juvelyrika"); tilenr = tilenr + 1; 
    TileButton(tilenr,"Laikrodis"); tilenr = tilenr + 1;  //!!Sd;
  end;
  TileButton(tilenr,"Atsargos"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Sandėlis"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  TileButton(tilenr,"Savikaina"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Gamyba"); tilenr = tilenr + 1;
  TileButton(tilenr,"Sąsk."); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Paveiksliukas"); tilenr = tilenr + 1; 
  end;
  TileButton(tilenr,"Įvairovės"); tilenr = tilenr + 1;
  TileButton(tilenr,"Tekstas"); tilenr = tilenr + 1;
  TileButton(tilenr,"Savik. sk."); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
  TileButton(tilenr,"Vart. laukai"); tilenr = tilenr + 1;
  end;
    TileButton(tilenr,"Žinutės"); tilenr = tilenr + 1;
  if (HasCharts) then begin
  TileButton(tilenr,"BI"); tilenr = tilenr + 1;  
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Uždaryta",Terminated);
  CheckBox(h2,v,0,"Neparduodama",NotForSales);
  if (GuiType==kGuiiPhone) then begin
    GetScreenSize(CurWindow,tp,lt,bm,rt);
    Pict_Field(5,v+=20,rt-10,bm-10,""); 
  end;
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Vienetas",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Savikaina",Normal,InPrice,true,0);  
  end;
  EditField(h,v+=vs,100,"Kaina",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Kainos pasikeitimas",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Kainos faktorius",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100, "Prekės formulė",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Antkainio %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Premijos %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Objektai",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
  EditField(h,v+=vs,-240,"Klasės",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
  ButtonFrame(h1,v=24,120,4,"Prekės tipas");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Prekės tipas"); 
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Paprasta",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"Sandėliuojama",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Struktūrinė",ItemType);
  if (StandardHansa==false) then begin
  RadioButton(h1,v+=16,kItemTypeService,0,"Paslauga",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Pridėti pav.");  
  end;
  if (StandardHansa==false) then begin
  CheckBox(h1,v+=32,0,"Prekė - projekto medžiaga",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metalas",Normal,Metal,false,0);  
    EditField(h,v+=vs, 140,"Svoris",Normal,RowWeight,false,0);  
    EditField(h,v+=vs, 140,"Dydis",Normal,Size,false,0);  
    EditField(h,v+=vs, 140,"Ilgis",Normal,Length,false,0);  
    EditField(h,v+=vs, 140,"Nuoroda",Normal,Reference,false,0);  
    v = 6; 
    EditField(h5,v, 140,"Pagr. akmens info",Normal,MajStoneDet,false,0);  
    EditField(h5,v+=vs, 140,"Spalva",Normal,Colour,false,0); 
    EditField(h5,v+=vs, 140,"Ryškumas",Normal,Clarity,false,0);  
    EditField(h5,v+=vs, 140,"Sertifikatas",Normal,Cert,false,0);  
    EditField(h5,v+=vs, 140,"Pap. akmens info",Normal,MinStoneDet,false,0);  
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Gamintojas",Normal,WatchBrand,false,0);  
    EditField(h,v+=vs, 140,"Stilius",Normal,StyleName,false,0);  
    EditField(h,v+=vs, 140,"Metalas",Normal,WatchMetal,false,0);  
    EditField(h,v+=vs, 140,"Judėjimas",Normal,Movement,false,0);  
    v = 6; 
    EditField(h5,v, 140,"Dirželis",Normal,BrcStr,false,0); 
    EditField(h5,v+=vs, 140,"Lytis",Normal,Gender,false,0);  
    EditField(h5,v+=vs, 140,"Kita",Normal,Other,false,0);  
    EditField(h5,v+=vs, 140,"Kita 2",Normal,Other2,false,0);  
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serijinio nr. kontrolė");
  RadioButton(h1,v,0,0,"Nėra",SerNrf);
  RadioButton(h1,v+=16,1,0,"Vnt.",SerNrf);
  RadioButton(h1,v+=16,2,0,"Siuntos",SerNrf);
    CheckBox(h1+200,v,0,"Nereikalauti siuntos nr. POS faktūrose",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Min. lygis",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maks. lygis",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Skyrius",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Lentynos kodas",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Šaltinis, nenur. kitaip",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Aplinkos aps. mokestis/kg.",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Pagrindinis Užsk. tipas",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Rizikos lygis",Normal,HazLevCode,false,HazLevSClass);
  EditField(h5,v ,50,"Alkoholio %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
    EditField(h6,v, 80,"Atsargų prek. tipas",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Vnt. 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Konversija 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Vnt. koeficientas",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Konversija 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Prekės plotis",Normal,Width,true,0); 
    EditField(h4,v ,50,"Aukštis",Normal,Height,true,0); 
    EditField(h5,v ,50,"Gylis",Normal,Depth,true,0); 
    EditField(h,v+=vs ,50,"Prekės tūris",Normal,Volume,true,0); 
    EditField(h4,v ,50,"Tankumas",Normal,Density,true,0); 
    EditField(h5,v ,50,"Svoris",Normal,Weight,true,0); 
  end;
  if (StandardHansa==false) then begin
  Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6) ,100,"Pagrindinė paletės prekė",Normal,DefPalletItem,true,INSClass);
  EditField(h5,v ,80,"Pakrovimo sritis",Normal,PickArea,false,LocAreaSClass);
  EditField(h,v+=vs ,100,"Pagr. patalpos sritis",Normal,LocArea,false,LocAreaSClass);
  EditField(h5,v ,50,"Palečių pakrov. srityje",Normal,PalletsInPickArea,true,0);
  EditField(h,v+=vs ,50,"Maks. kiekis paletėje",Normal,QtyonPallet,true,0);
  EditField(h4,v ,50,"Paletės sl.",Normal,PalletLayers,true,0);
  EditField(h5,v ,50,"Kiekis sluoksnyje",Normal,QtyonPalletLayer,true,0);
  EditField(h,v+=vs ,50,"Pal. plotis",Normal,PalletWidth,true,0);
  EditField(h4,v ,50,"Pal. aukštis",Normal,PalletHeight,true,0);
  EditField(h5,v ,50,"Pal. gylis",Normal,PalletDepth,true,0);
  EditField(h,v+=vs ,50,"Viet. plotis",Normal,DefPosWidth,true,0);
  EditField(h4,v ,50,"Viet. aukštis",Normal,DefPosHeight,true,0);
  EditField(h5,v ,50,"Viet. gylis",Normal,DefPosDepth,true,0);
  EditField(h,v+=vs ,50,"Plotis",Normal,Width,true,0);
  EditField(h4,v ,50,"Aukštis",Normal,Height,true,0);
  EditField(h5,v ,50,"Gylis",Normal,Depth,true,0);
  EditField(h,v+=vs ,50,"Tūris",Normal,Volume,true,0);
  EditField(h4,v ,50,"Tankis",Normal,Density,true,0);
  EditField(h5,v ,50,"Neto svoris",Normal,NetWeight,true,0);
  EditField(h5,v+=vs ,50,"Svoris",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Savikaina",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h5,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Savik. pasikeitimas",ViewOnly,LastPriceChange,true,0); 
  end;
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Savik. bazine val. 2",Normal,InPriceB2,true,0);
  ButtonFrame(h1,v+=24,200,4,"Savik. atnaujinimas po gavimo");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Savik. atnaujinimas po gavimo"); 
  end;
  RadioButton(h1,v,0,0,"Nėra",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Paskutinio pirkimo kaštai(su pap. kašt.)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Svertinis vidurkis",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Paskutinio pirkimo kaštai(be pap. kašt.)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Atnaujinti savik. Sand. perkainavimuose");
  RadioButton(h5,v,0,0,"Neatnaujinti",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Paskutinio perkainavimo savik.",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Svert. vidurkis",SRUpdateCost);
  if (StandardHansa==false) then begin
  EditField(h,v=vm+2*vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Papildomi kaštai",Normal,ExtraCost,true,0); 
  end;
  EditField(h,v+=vs ,100,"Svertinis vid.",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs ,100,"Svertinis vid. bazine val. 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Pask. pirkimo kaštai(su pap. kašt.)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo kaina(be. pap. kašt.)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Pask. pirkimo val.",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fiksuotas frachtas",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Įtraukti fiksuotą prekės frachtą",InclItemFreight);
  CheckBox(h5,v,0,"Turi akcizą",HasExcise);   
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Ruošinys",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Rodyti komponentus dokumentuose",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Faktūros ruošinys",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Brūkšn. kodas",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Kontrakto prekė",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Nomenklatūros kod.",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Nuomos faktūravimas",Normal,RentalItem,false,INSClass); 
  end;
  EditField(h2,v,150,"ECN kodas",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Produktų ir paslaugų klasės",Normal,CPSCode,false,0);
  end;
  if (HasLocalization("LVA")) then begin
    EditField(h,v+=vs,55,"Fiskalinis Departamentas",Normal,FiscalDep,false,0); 
  end;
  EditField(h,v+=vs ,120,"Garantija mėn.",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"Spalva",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Rūšiav, kodas",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"Alt. kodas",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Perspėjimas",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"Vietinė pard. sąsk.",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameLIT & "Pardavimų sąsk.",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Ne ES pard. sąsk.",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h,v+=vs,55,"Pasl. fakt. pard sąsk.",Normal,SVOInvbleSalesAcc,false,AccSClass); 
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Komponentų panaudojimas",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. medžiagų pan. sąsk.",Normal,ProjMaterialsUsageAcc,false,AccSClass); 

  EditField(h2=360,v=vm,55,"Viet. savik. sąsk.",Normal,CostAcc,false,AccSClass);
 EditField(h2,v+=vs,55,VATZoneNameLIT & "Savikainos sąsk.",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Ne ES savik. sąsk.",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
  EditField(h2,v+=vs,55,"Pasl. fakt. savik. sąsk.",Normal,SVOInvbleCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. garant. savik. sąsk.",Normal,SVOWarrantyCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. sut. savik. sąsk.",Normal,SVOContractCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Pasl. Goodwill savik. sąsk.",Normal,SVOGoodwillCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Viešb. WIP sąsk.",Normal,HotelWIPAcc,false,AccSClass); 
  end;
  EditField(h2=540,v=vm,20,"Viet. PVM kd.",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabel_LIT(1) & "PVM kd.",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Ne ES PVM kd.",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
  CheckBox(h2,v+=20,0,"Skaičiuoti percepc.mokesčius",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
   CheckBox(h2,v+=16,0,"Skaičiuoti sulaikymo mokesčius",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
  EditField(h2=670,v=vm,50,"Viet. mok. šabl.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_LIT(1) & "Mok. šabl.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
  EditField(h2,v+=vs,50,"Eksp. mok. šabl.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=680;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h2,v,20,"Reversinis PVM kodas",Normal,RvrsVATCode,false,VATCodeSClass); v = v + vs;
    end;
    if (HasLocalization("SWE")) then begin
      EditField(h2,v,20,"Cheminis mokesčių kodas",Normal,ChemicalTaxCode,false,ChemicalTaxCodeSClass); v = v + vs;
    end;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Įvairovių šablonas",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Ataskaitos eilė",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Poaibiai",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Kalba",0,LangCode,false,LangSClass);
  MatCol(1,94,"Tekstas",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Pirminis savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Įsigijimo kaina",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _nuo bazinės kainos",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Svertinis vidurkis",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Eilė",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"Jokio",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Eilės savikainos modelis");
  RadioButton(h,v,0,0,"Pagal nutylėjimą",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Savikaina serijiniams nr.");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Savikaina ne serijiniams nr.",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Savikaina serijiniams nr.",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Eilės modelis pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Eilė ne pagal patalpą",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Eilė pagal patalpą",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"Svertinis vid. pagal patalpą");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"Svert. vid. ne pagal patalpą",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"Svert. vid. pagal patalpą",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Savikaina patalpai");
  RadioButton(h2,v,0,0,"Pagal nutylėjimą",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Savikaina ne pagal patalpą",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Savikaina patalpai",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
  h = 180; v = 6;
  label = UserDefined("INVc","UserStr1");
  if (nonblank(label)) then begin
    EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
  end;
  label = UserDefined("INVc","UserStr2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
  end;
  label = UserDefined("INVc","UserStr3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
  end;
  label = UserDefined("INVc","UserStr4");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
  end;
  label = UserDefined("INVc","UserStr5");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
  end;
  label = UserDefined("INVc","UserVal1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
  end;
  label = UserDefined("INVc","UserVal2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
  end;
  label = UserDefined("INVc","UserVal3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
  end;
  label = UserDefined("INVc","UserDate1");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate2");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
  end;
  label = UserDefined("INVc","UserDate3");
  if (nonblank(label)) then begin
    EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
  end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Žinutė",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin 
  SpecialMenu("Prekės būklės ataskaita",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Perskaičiuoti kainoraštį",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin 
    SpecialMenu("Prekės istorija",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Prekės patalpoje būklė",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin 
    SpecialMenu("Prekės būklė per alt. kodą",'S',5,"ItemStatusAltINDsm"); 
  end;  
  SpecialMenu("Open Extended description",' ',6,"BPIINTextFromINDsm");// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 06 12 2018 y. at 11:42:11 AM
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Sukurti perkamą prekę",' ',1,"PIFromINDsm");
  SpecialMenu("Sukurti ruošinį",' ',2,"RecFromINDsm");

  EndWindow;
end;

window CashierDefTClass:1
  wtag("language","LIT"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("POS Nustatymai",CashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(CashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v,70,"Pagr. pirkėjas",Normal,DefCustCode,false,CUSClass); 
  if (HasModNL) then begin
  EditField(h,v+=vs,70,"Back office sąsk.",Normal,CredAcc,false,AccSClass); 
  EditField(h,v+=vs,70,"Nurašymo sąsk.",Normal,WriteOffAcc,false,AccSClass); 
  end;
  if (HasModRest) then begin
  EditField(h,v+=vs,70,"Arbatp. mok. būdas",Normal,TipPMCode,false,PMSClass);   
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,70,"Spausdintuvas",Normal,Printer,false,SetSClass);   
    if (StandardHansa==false) then begin
    EditField(h,v+=vs,70,"Pensininkų nuol. prekė",Normal,DiscountItem,false,INSClass);   
    end;
  end;
  if (HasModIN) then begin
    if (IsEnterprise) then begin
      chkbx = 2;
      if (HasLocalization("LVA")) then begin
        chkbx = 4;
      end;
      ButtonFrame(h-130,v+=3*vs+chkbx*16,490,2,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v + 40;
      if (HasLocalization("LVA")) then begin
        v = v+3*16;
      end;
      if (HasModRest) then begin
        ButtonFrame(h-130,v,490,2,"Automatinis sandėlio atnaujinimas POS modulyje");
      end else begin
        v = v;
      end;
    end;
      EditField(h,v,70,"Atnaujinimo intervalas",Normal,UpdStockMaintTime,false,PasteCurTime); 
//    ButtonFrame(h2,v,170,3,"Run Update #Stock# Maintenance");
//    RadioButton(h2,v,0,0,"Manually",UpdStockMaint);
//    RadioButton(h2,v+=16,1,0,"Periodically",UpdStockMaint);
//    RadioButton(h2,v+=16,2,0,"When OKing POS Invoice",UpdStockMaint);

    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",UpdStockMaint); 
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",POSOKSD);
  end;
  if (HasModIN) then begin
    ButtonFrame(h-130,v+=40,490,2,"Automatinis sandėlio atnaujinimas Restorano modulyje");
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,RestUpdStockMaintTime,false,PasteCurTime);
    CheckBox(h2,v,0,"Vykdyti sandėlio atnaujinimą",RestUpdStockMaint);
    CheckBox(h2,v+=18,0,"Kurti patvirtintus sandėlio nurašymus",RestOKSD);
//    CheckBox(h2,v,0,"OK #Goods Receipts#",OKPU);
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h-130,v+=40,490,2,"Automatinis kasos sesijų uždarymas"); 
    EditField(h,v,70,"Atnaujinimo intervalas",Normal,CashupMaintInterval,false,PasteCurTime); 
    CheckBox(h2,v,0,"Vykdyti kasos sesijų uždarymą",CashupMaint); 
    CheckBox(h2,v+=18,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession);
  end;
//  EditField(h,v+=vs,60,"POS nr.",Normal,POSNr,false,0); 
  ButtonFrame(h-130,vm2=(v+=37+vs),220,3,"Prekės paveiksliukas kasininko ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCashier);
  if (BuildProductCode=="PAYYAPERP") then begin
    CheckBox(h2,vm2,0,"Atidaryta kasos sesija - privaloma",RequireOpenSession); 
  end;
  ButtonFrame(h-130,v+=40,220,3,"Prekės paveiksliukas kliento ekrane");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Numatytasis",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"Įjungtas",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Išjungtas",ItemPictureCustomer);
  v = vm + 3;
  if (HasModRest) then begin
    CheckBox(h2,v,0,"Įtraukti arbatpinigius į kasos ataskaitą",InclTipInCashup);
    v = v + 16;
  end;
  if (IsEnterprise) then begin
  if (HasModSL) then begin
//      CheckBox(h2,v,0,"Include Open Invoice value in Cash Up",InclOpenInvCashup);
//      v = v + 16;
  end;
  end;
  if (HasLocalization("LVA")) then begin
    CheckBox(h2,v,0,"Neleisti nulinių kiekių",NoZeroQty);v = v + 16; 
    CheckBox(h2,v,0,"Tikrinti PVM reg. nr. įterpiant prekę su atvirkštiniu PVM",CheckVATNo);v = v + 16; 
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
    CheckBox(h2,v,0,"Registruoti pardavimus fiskaliniame įrenginyje",CashSalesToFiscalControlUnit); 
      v = v + 16;
    end;
    CheckBox(h2,v,0,"Leisti kelias sesijas tame pačiame įrenginyje",MultipleSessionsPerLocalMachine); 
    CheckBox(h2,v+=16,0,"Neleisti keisty patvirtintų POS faktūroms Live Sync klientams",NoChangesPOSOnLiveSyncClient); 
  CheckBox(h2,v+=16,0,"Reikalauti grąžinimo priežasties",RequireReturnReason); 
  CheckBox(h2,v+=16,0,"Reikalauti pirkėjo grąžinimui",RequireReturnCustomer); 
    if (HasLocalization("LVA")) then begin
      CheckBox(h2,v+=16,0,"Neleisti nulinių kiekių",NoZeroQty); 
  end;
  CheckBox(h2,v+=16,0,"Pardavimai ne fiskaliniam pirkėjui",AlwaysFiscal);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 03 01 2019 y. at 11:15:35 AM
  end;

  if (HasModNL) then begin
  ButtonFrame(h2,v+=45,220,2,"Kasos ataskaita per operacijų meniu"); 
  CheckBox(h2,v,0,"Pradėti nuo ankstesnio POS balanso",StartFromLastPOSBal); 
  if (HasModNL) then begin
  CheckBox(h2,v+=16,0,"Spausdinti detalią DK operaciją",PrintDetNLTrans); 
  end;
    EndFrame;
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm2,170,3,"Numatytasis laukas naujoje faktūroje"); 
  RadioButton(h2,v,0,0,"Numatytasis",DefInvoiceField); 
  RadioButton(h2,v+=16,1,0,"Prekė",DefInvoiceField);
    if (HasSerialNumbers) then begin
  RadioButton(h2,v+=16,2,0,"Serijinis nr.",DefInvoiceField);
    end;
    EndFrame;
  end;
  EndWindow;
end;
