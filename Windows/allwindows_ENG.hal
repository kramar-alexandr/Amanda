external inner procedure SetupColumWithKeypadWindow(var real,var real,var real,var real,var real,var real,var real);
external inner function Integer POSFontSize();
external inner function string 255 F_Label(string);
external inner procedure SplitButton(LongInt,LongInt,LongInt,LongInt,LongInt,string,string,string,string,LongInt);
external inner procedure POSKeyPad(LongInt,LongInt,LongInt,LongInt,LongInt,string,LongInt);
external inner function string 255 GetChangePaswordLink();
remote function UUID GetServerUUIDRemote();
external inner function string 255 RemainingEinvoicesQuantity;
external inner function Boolean DisplayAdditionalFields();
remote function Integer MailAcceptanceStatus(LongInt);
external inner function Boolean IsMoveToCloud(record SetupStatusBlock);
external inner function Boolean IsMoveToCloudB();
external outer function Boolean IsCloudControllerClient();
external inner function string 255 GetCurrentStoreName();
external inner function Boolean CompaniesInClientMode();
external inner function Boolean ProductInDemoMode();
remote function string 255 GetCompanyShortCode(string);
external inner function Boolean AnyModuleAvailable();
external inner function Boolean AcceptanceStatusColumnTest(string);
external inner function Integer FlipCharCode(Integer,Integer);
external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner function boolean AddBicToMasterWindow(integer,var real,var real,real,real,real,real);
external inner function Boolean IsIntEnabActive(var string,var string,var Boolean,var string);
external inner function Boolean TouchScreenLookVertical();
external inner procedure SysEClass_Tool(Integer,var real,var real);
external inner procedure GTransEClass_Tool(Integer,var real,var real);
external inner procedure GTrans2EClass_Tool(Integer,var real,var real,var real);
external inner procedure GBaseEClass_Tool(Integer,var real,var real);
external inner procedure TransGenVClass_Tool(Integer,var real,var real);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
external inner function string 60 RestPMCashModePayMode();
external outer function string 255 MasterBannerURL();
external inner procedure ItemStatusUserSettings(string,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean,var Boolean);
external inner function Boolean AllowedInCountry(integer);
external inner function Integer ResourceWindowResourceType();
external inner function Boolean ResPlan_Rental();
external inner function Boolean ResPlan_ProdOperations();
external inner function Boolean ReadPOSButtons(string,string,longint,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean ReadNPTSWindowData(string,string,longint,string,string,Date,Time,var Boolean,var string,var string,var string,var record POSButtonsVc);
external inner function Boolean TouchScreenLook();
external inner procedure ExtractObj(string,var Integer,var string);
external inner function Boolean IsSessionOpen(string,string,Date,Time);
external inner procedure CntNPTSPaymentCurrencies(var Array string,var Array string,var Array Integer,var Array string,var Integer);
remote procedure CntPOSCurrencies(var Array string,var Array Boolean,var Integer);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function string 60 TileUserDefined(string,Integer,var Integer);
external inner function Boolean CUVATNrColumn;
external inner function Integer GetInternetEnablerCountry();
external inner function Integer CntVarietyCode(Integer,var Array string);
external inner function Integer VarietyMatMax(Integer);
external inner function Boolean UseTaxTemplatesforTaxCalc();
remote procedure TablesViewWClassDo(record LocalMachineBlock,string,Array string,Array string,Array string,Array string,Array Integer,var Integer,var LongInt);
external inner function string 20 GetMenuCode(string);
external inner procedure DrawModifierButtons(var Integer);
remote procedure ForkLiftQueueArray(string,string,var Array string,var Array string,var Array string,var Array string,var Array val,var Array Integer,var Array string,var Integer,Boolean,LongInt,LongInt,string);

external inner function Boolean DisplayLoginButtons();
external inner function Integer LoginShortcutsLines(Integer);
external inner function Integer LoginShortcutsPos(Real,Integer);

external inner procedure DefineTTRRowTypes(Integer);
external inner function real ItemButtons(string,Integer);
external inner procedure HWStoreWClassAddProducts(Integer);
external inner function Boolean HasYodlee();
external inner function Boolean HasAvalara();
external inner function Boolean HasCharts();
external inner function Boolean HasDetailedCharts();
external inner function Boolean HasNewRegistration();
external inner function Boolean ActivityIsForAcceptanceOrFYI(record ActVc,Boolean,Boolean);
// TravelLog
external inner function Integer LoginShortcuts();
external inner function Boolean TestConfigurationEnabler(string);
remote function Integer CustomerSalesPaymentTermType(string);
// POS Standalone
external inner function Boolean DefCustCodeSetup();
// in-apps
external inner function Boolean HasInAppsAvailable();
external inner function Integer CountCountries();

// Language functions ENG
external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabel_ENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner procedure LoginButtons2_ENG(Real,Real);
external inner procedure FORMDEF_ENG();
external inner function string 255 DemoMsgWClassTitle_ENG(Boolean,Boolean);
external inner procedure TBEClassDef_ENG();
external inner function string 255 VATZoneNameENG();
external inner procedure TSERW_ENG();
external inner procedure TSERWNT_ENG();
external inner procedure TSERWTouch_ENG();
external inner procedure TSERWTEST_ENG();
external inner procedure INVFORM_ENG(Boolean);
external inner procedure DisplayRecordDetails_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,string,string,string,string,string,Integer,string,string,string,val,string,Boolean,string,string);
external inner procedure DrawPOSInterface2_ENG(string,string,record POSButtonsVc,string,Integer,Integer);
external inner procedure DisplayRecordDetailsCustDisplay_ENG(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,string,string,val);
external inner function string 255 ResDayWClassWindowTitle_ENG();
external inner function string 255 ResMonWClassWindowTitle_ENG();
external inner function string 255 RTMonWClassWindowTitle_ENG();
external inner procedure SetupNightAuditWindowControls_ENG(Boolean);
external inner procedure CURClassDefinitionENG();
external inner function real DrawPaymentModesButtons_IV_ENG(real);
external inner function real FunctionButtons_ENG(string);
external inner procedure CreditCardWindowHeader_ENG(Boolean,Boolean,Real);
external inner procedure CreditCardWindowButtons_ENG(string,string,real);
external inner procedure CreditCardWindowInvoiceDetail_ENG(Real);
external inner procedure CreditCardWindowDeliveryDetail_ENG(Real);
external inner function real DrawPaymentModesButtons_ENG();
external inner procedure DrawBarMenuTiles_ENG(string);
external inner procedure DrawRestPMOtherPay_ENG();
external inner procedure DisplayRecordDetailsRA_ENG2(LongInt,LongInt,string,date,time,string,string,string,string,string,string,Integer,string,LongInt,Date,string,LongInt,string,string);
external inner procedure DrawModifierButtons2_ENG(var integer,var integer);
external inner procedure OKCancel_ENG();
external inner procedure DefineElearningURLCacheLClass_ENG();
external inner procedure DefineElearningURLCacheDClass_ENG();
external inner function real TravelLogDeductions_ENG(real,real);
external inner procedure LoginButtons_ENG(Real);
external inner procedure FORMDEF2_ENG();
external inner procedure FORMDEF3_ENG();
external inner procedure ARS2RClass_ENG();
external inner procedure ALLVATRClass_ENG();

external inner function Boolean IsStandardUnused();
external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();
external inner function Boolean HasATOL();

external inner function Boolean HasAccPeriods();
external inner function Boolean HasAccessGroups();
external inner function Boolean HasAddFee();
external inner function Boolean HasApprovals();
external inner function Boolean HasCCPayments();
external inner function Boolean HasAdvancedAccounting();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasAdvancedProduction();
external inner function Boolean HasAdvancedStock();
external inner function Boolean HasAged();
external inner function Boolean HasBar();
external inner function Boolean HasBase2();
external inner function Boolean HasBranch();
external inner function Boolean HasBuyBack();
external inner function Boolean HasCategories();
//external inner function Boolean HasConsigmentStock();
external inner function Boolean HasCommunicator();
external inner function Boolean HasConsignmentStock();
external inner function Boolean HasContactClassification();
external inner function Boolean HasContactRelations();
external inner function Boolean HasConsolidation();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCreditLimit();
external inner function Boolean HasCustItem();
external inner function Boolean HasCustomerSearchKey();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasDownpayments();
external inner function Boolean HasDefineColumns();
external inner function Boolean HasDeliveryAddress();
external inner function Boolean HasDepartments();
external inner function Boolean HasETaxDocuments();
external inner function Boolean HasEInvoicing();
external inner function Boolean HasEndorsedChecks();
external inner function Boolean HasExtraNLComment();
external inner function Boolean HasExtTax();
external inner function Boolean HasFavouriteActTypes();
external inner function Boolean HasFiscalPrinter();
external inner function Boolean HasFormEditor();
external inner function Boolean HasFreightAdvanced();
external inner function Boolean HasHideCostPrice();
external inner function Boolean HasHotelInterface();
external inner function Boolean HasGuestUserDefined();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasIncomeAndExpenseBook();
external inner function Boolean HasIOUChecks();
external inner function Boolean HasItemClassification();
external inner function Boolean HasItemGroups();
external inner function Boolean HasKPIs();
external inner function Boolean HasLanguages();
external inner function Boolean HasLimitedAccess();
external inner function Boolean HasLocalMachines();
external inner function Boolean HasLoyaltyCards();
external inner function Boolean HasMailTags();
external inner function Boolean HasMainPartner();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasNLBudget();
external inner function Boolean HasNLBudgetClass();
external inner function Boolean HasObjects();
external inner function Boolean HasInvoiceOfficialSerNr();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasOrderClasses();
external inner function Boolean HasPreferedOfficialSerNr();
external inner function Boolean HasNumberSeries();
external inner function Boolean HasPersons();
external inner function Boolean HasPocketScreen();
external inner function Boolean HasPositions();
external inner function Boolean HasPrepayments();
external inner function Boolean HasProjects();//very strange tag
external inner function Boolean HasPriceLists();
external inner function Boolean HasQualityControl();
external inner function Boolean HasReconLevel2();
external inner function Boolean HasReminderLevel();
external inner function Boolean HasRemoteBackup();
external inner function Boolean HasResourceDisplayGroups();
external inner function Boolean HasRussianPrepayment();
external inner function Boolean HasRetGoodsToSupp();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasRoomPackages();
external inner function Boolean HasRoomTypes();
external inner function Boolean HasRoute();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasSecondQuantity();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasServerInCloud();
external inner function Boolean HasSettlementDiscount();
external inner function Boolean HasSimulations();
external inner function Boolean hasSimAccruals();
external inner function Boolean HasSkypeConnection();
external inner function Boolean HasSIPServerConnection();
external inner function Boolean HasStrAsSignFType();
external inner function Boolean HasTouchScreenDevice();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasTestFeatures();
external inner function Boolean HasMetroTestFeatures();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasThrouLocation();
external inner function Boolean HasTouchScreenLook();
external inner function Boolean HasTREO();
external inner function Boolean HasVarieties();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();
external inner function Boolean HasWithholdingTaxAdvanced();
external inner function Boolean HasWorkOrders();
external inner function Boolean HasWorkflowOverview();

external inner function Boolean HasStandardCRM();
external inner function Boolean HasStandardOrganizer();
external inner function Boolean HasStandardCommunicator();

external inner function Boolean HasEMail();
external inner function Boolean HasExternalEMail();

external inner function Boolean HasModAT2();
external inner function Boolean HasModBA();
external inner function Boolean HasModCheck();
external inner function Boolean HasModCL();
external inner function Boolean HasModCO();
external inner function Boolean HasModCons();
external inner function Boolean HasModCourses();
external inner function Boolean HasModCredMan();
external inner function Boolean HasModCRM();
external inner function Boolean HasModEDI();
external inner function Boolean HasModExp();
external inner function Boolean HasModHotel();
external inner function Boolean HasModHRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModIntStock();
external inner function Boolean HasModNL();
external inner function Boolean HasPaymentGateway();
external inner function Boolean HasModPO();
external inner function Boolean HasModPOS();
external inner function Boolean HasModPL();
external inner function Boolean HasModPOProg();
external inner function Boolean HasModPP();
external inner function Boolean HasModProd();
external inner function Boolean HasModQT();
external inner function Boolean HasModRent();
external inner function Boolean HasModRest();
external inner function Boolean HasModRsrt();
external inner function Boolean HasModSO();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasModTS();
external inner function Boolean HasModWHM();
external inner function Boolean HasModDI();
external inner function Boolean UsePostOKButton();
external inner function Boolean HasBankImport();
external inner function Boolean HasPLIntegratedWithNL();
external inner function Boolean HasSLIntegratedWithNL();
external inner function Boolean HasIntegratedNL();
external inner function Boolean HasConsStockMoveInvoices();

window SVOSerDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,t,v,vs;
  WindowBegin("Known Serial Number",SVOSerDClass,CGview,SVOSerView);
  SetWRect(20,80,552,600);
  UseView(SVOSerVc);
  v = 6; vs = 20; h = 120; h2 = 290;
  Tile(0,90,false,"",ItemCode);
  EditField(h,v, 100,"Item",Normal,ItemCode,false,INSClass);
  EditField(h2,v,-40,"Serial No.",Normal,SerialNr,false,0);
  EditField(h,v+=vs,-40,"Desc.",Normal,ItemName,false,0);
  EditField(h,v+=vs,100,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h2,v,-40,"Name",Normal,CustName,false,0);
  h2 = 350;
  TileButton(1,"General");
  TileButton(2,"Warranty Information");
  TileButton(3,"Part Details");
  Tile(1,170,false,"",SoldDate);
  EditField(h,v=6,110,"Sold",Normal,SoldDate,false,PasteCurDate);
  EditField(h2,v,-40,"Warranty Until",Normal,WarrantyUntil,false,PasteCurDate);
  EditField(h,v+=vs,110,"Sales Price",Normal,SalesPrice,true,0);
  EditField(h2,v,-40,"Cost Price",Normal,CostPrice,true,0);
  EditField(h,v+=vs,110,"#Supplier#",Normal,VECode,false,VESClass);
  EditField(h2,v,-40,"Mother No.",Normal,MotherNr,false,SVOSerSClass);
  EditField(h,v+=vs,110,"Last GSX Query",Normal,LastGSXQuery,true,0);
  EditField(h2,v,-40,"Price List",Normal,PLCode,false,PLDefSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. о 15:26:18
  Tile(2,450,false,"",ProductDescription);

  EditField(h,v=6,-40,"Product Descr.",Normal,ProductDescription,false,0);
  EditField(h,v+=vs,-40,"Config Descr.",Normal,ConfigDescription,false,0);
  EditField(h,v+=vs,110,"Purchase Country",Normal,PurchaseCountry,false,0);
  EditField(h2,v,-40,"Est. Purchase Date",Normal,EstimatedPurchaseDate,true,PasteCurDate);
  CheckBox(h,v+=vs,0,"#Personalised#",Personalized);

  CheckBox(h,v+=vs,0,"Global Warranty",GlobalWarranty);
  CheckBox(h2,v,0,"Limited Warranty",LimitedWarranty);
  EditField(h,v+=vs,-40,"Warranty Status",Normal,WarrantyStatus,false,0);

  EditField(h,v+=vs,110,"Registration Date",Normal,RegistrationDate,true,PasteCurDate);
  EditField(h2,v,-40,"Warranty Ref No",Normal,WarrantyRefNo,false,0);

  EditField(h,v+=vs,110,"Warranty From",Normal,CoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Warranty Until",Normal,WarrantyUntil,true,PasteCurDate);
  EditField(h,v+=vs,110,"On Site From",Normal,OnsiteStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"On Site Until",Normal,OnsiteEndDate,true,PasteCurDate);
  EditField(h,v+=vs,110,"CS Code",Normal,CSCode,false,0);
  EditField(h2,v,-40,"CS Type",Normal,CSType,false,0);

  CheckBox(h,v+=vs,0,"Powertrain",PowerTrainFlag);
  CheckBox(h,v+=vs,0,"TriCare",TriCareFlag);
  CheckBox(h2,v,0,"Ecorath",EcorathFlag);

  EditField(h,v+=vs,110,"Contract Type",Normal,ContractType,false,0);
  EditField(h,v+=vs,110,"Contract From",Normal,ContractCoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Contract Until",Normal,ContractCoverageEndDate,true,PasteCurDate);
  EditField(h,v+=vs,-40,"SLA Group Descr.",Normal,SLAGroupDesc,false,0);

  CheckBox(h,v+=vs,0,"#Labour# Covered",LaborCovered);
  CheckBox(h2,v,0,"Part Covered",PartCovered);

  EditField(h,v+=vs,-40,"Image",Normal,ImageURL,false,0);
  EditField(h,v+=vs,-40,"Exploded View",Normal,ExplodedViewURL,false,0);
  EditField(h,v+=vs,-40,"Manual",Normal,ManualURL,false,0);

  EditField(h,v+=vs,110,"Contract Cov. Start",Normal,ContractCoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Contract Cov. End",Normal,ContractCoverageEndDate,true,PasteCurDate);

  EditField(h,v+=vs,110,"APP Agr. No.",Normal,APPAgreementNumber,true,0);
  EditField(h2,v,-40,"APP Total",Normal,APPTotalFromOrder,true,0);

  EditField(h,v+=vs,-40,"APP  Statement",Normal,APPCoverageDurationStatement,true,0);

  Tile(3,200,false,"",Math);
  v = 24;
  MatrixBegin(20,v,-40,-10,-,999);
  Flip(0);
  MatCol(t=1,32,"Part Number",0,PartNumber,false,0);
  Flip(1);
  MatCol(t,120,"Part Description",0,PartDescription,false,0);
  MatCol(t,-180,"#Stock# Price",0,StockPrice,true,0);
  MatCol(t,-90,"Exchange Price",0,ExchangePrice,true,0);
  Flip(2);
  MatCol(t,120,"Part Type",0,PartType,false,0);
  MatCol(t,-190,"Comp. Code",0,ComponentCode,false,0);
  MatCol(t,-110,"Orig. Part No.",0,OriginalPartNumber,false,0);
  Flip(3);
  MatCol(t,120,"EEE Code",0,EEECode,false,0);
  MatCol(t,-130,"#Labour# Tier",0,LaborTier,false,0);
  MatCol(t,-40,"Serial.",0,IsSerialized,false,0);
  EndMatrix;
  vs = 20;
  v = 18; VTab(-25,v,-6,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-25,v,-6,v+vs,ToolFlip,2,"B");
  v=v+vs; VTab(-25,v,-6,v+vs,ToolFlip,3,"C");
  SpecialMenu("Open selected Link in Browser",'w',1,"OpenLinkSVOSerDsm");
//  SpecialMenu("Update Parts Item Prices from Warranty Check",' ',2,"PartsLookupSVOSerDsm"); //?? WNS
  SpecialMenu("Parts Lookup",'l',2,"PartsLookupSVOSerDsm");
  SpecialMenu("Serial Number History",'h',3,"SerHistSVOSerDsm");
  EndWindow;
end;

window WSDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer rn,tilenr,flipnr,f;
  
  WindowBegin("Work Sheet",WSDClass,CGview,WSView);
  SetWRect(20,80,750,460);
  Sizeable(512,-1,0,0);
  UseView(WSVc);
  FormName(WSForm);
  h1 = 75;h2 = 290; h3 = 470; vs = 20;
  Tile(0,70,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h=240,v=vm,-40,"Name",Normal,Addr0,false,0);
  v = v+vs;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  tilenr = 1;
  TileButton(tilenr,"Date"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Contact"); tilenr = tilenr + 1;
  TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Employee",Normal,EMCode,false,UserSClass);
  EditField(h1,v+=vs,82,"Date",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    EditField(h1,v+=vs,82,"Location",Normal,Location,false,LocationSClass);
  end;
  EditField(h1,v+=vs,82,"Short Code",Normal,ACShort,false,ACShortSClass);
  EditField(h2,v=vm,135,"Employee Name",Normal,EMName,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Cost A/C",Normal,CostAcc,false,AccSClass);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  EditField(h3,v=vm,82,"Serv. Order No.",Normal,SVONr,false,0);
  if (HasModSVO) then begin
    EditField(h3,v+=vs,82,"Work Order No.",Normal,WONr,false,0);
  end;
  if (HasModIN) then begin
    CheckBox(h4,v=vm,0,"Update #Stock#",UpdStockFlag);
  end;
  if (IsEnterprise) then begin
    CheckBox(h4,v+=16,0,"Reserved",PrelOK);
  end;
/* What is this???, It can be changed by the user and what if half is invoiced ?? */
//  CheckBox(h4,v+=16,0,"Invoiced",InvFlag);
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(410,-41,95,"#VAT#",ViewOnly ,Sum3,true,0);
  EditField(-150,-41,95,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,95,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-40,WSRowType,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=1,32,"Item",0,ArtCode,false,INSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
	MatCol(t,94,"S-Time",0,sTime,true,PasteCurTime);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. о 16:58:48
	MatCol(t,150,"E-Time",0,eTime,true,PasteCurTime);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. о 16:58:50
  MatCol(t,205,"Qty",0,Quant,true,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 November 2018 16:43:46
  EnterSkip(ArtCode);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,244,"Description",0,Spec,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 November 2018 16:44:00
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-255,"Unit Price",0,Price,true,0);
    MatCol(t,-165,"%",0,vRebate,true,0);
    MatCol(t,-130,"Sum",0,Sum,true,0);
    MatCol(1,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-225,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    MatCol(1,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-225,"Item Type",0,ItemType,false,SetSClass);
  MatCol(t,-150,"Main Serial No.",0,MotherNr,false,SerialNrSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  if (HasSerialNumbers) then begin
  MatCol(t,-225,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  if (HasModProd) then begin
  MatCol(t,-90,"Recipe",0,Recepy,false,RecSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-345,"Returned",0,Returned,true,0);
  MatCol(t,-285,"Invoiced",0,Invd,true,0);
  MatCol(t,-225,"FIFO",0,FIFO,false,0);
  MatCol(t,-125,"Row FIFO",0,FIFORowVal,false,0);
  if (HasModNL) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"Short Code",0,ACShort,false,ACShortSClass);
    MatCol(t,-270,"Sales A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-200,"Cost A/C",0,CostAcc,false,AccSClass);
    if (HasObjects) then begin
      MatCol(t,-130,"Tags/Objects",0,Objects,false,ObjSClass);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusWSDsm");
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,CurncyCode); tilenr = tilenr + 1;
  vs = 20;
  EditField(h=110,v=6,50,"Currency",ViewOnly,CurncyCode,false,CurncyCodeSClass);
  if (HasMultiCurrency) then begin
    if (HasBase2) then begin
      EditField(h,v+vs,50,"Base Currency 1",ViewOnly,BaseRate1,true,0);
    end else begin
      EditField(h,v+vs,50,"Base Currency",ViewOnly,BaseRate1,true,0);
    end;
    if (HasBase2) then begin
      EditField(h,v+(vs*2),50,"Base Currency 2",ViewOnly,BaseRate2,true,0);  
    end;  
    EditField(h2=295,v,50,"Rate",ViewOnly,FrRate,true,0);
    if (HasBase2) then begin
      RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
      RateField(h3,v+=vs,50,":",ViewOnly,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);   
      end else begin
        RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h,v+=vs,50,"Base Currency 1",ViewOnly,BaseRate1,true,0);
      EditField(h,v+=vs,50,"Base Currency 2",ViewOnly,BaseRate2,true,0);
    end;
  end; 
  Tile(tilenr,130,false,tilenr,Phone); tilenr = tilenr + 1;
  vs = 20;h = 75;h2 = 300;
  EditField(h,vm=(v=6),150,"Telephone",Normal,Phone,false,0);
  EditField(h,v+=vs,150,"Fax",Normal,Fax,false,0);
  if (IsEnterprise) then begin
    EditField(h,v+=vs,200,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
  end;
  if (HasLanguages) then begin 
    EditField(h,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (HasPriceLists) then begin
    EditField(h,v+=vs,80,"Price List",Normal,PriceList,false,PLDefSClass);
  end;
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelsENG(h2,v=vm+vs,170,16);
  end;
  Tile(tilenr,90,false,tilenr,Comment1); tilenr = tilenr + 1; 
  vs = 20;
  EditField(h=75,v=6,-20,"Comment",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment4,false,0);
  EnterSkip(TransDate);
  if (HasModSVO) then begin
  SpecialMenu("Open Work Order",' ',0,"OpenWOFromWSDsm");
  end;
  if (HasIntegratedNL) then begin
    SpecialMenu("Open #NL# Transaction",'t',1,"OpenTRFromWS");
  end;
  SpecialMenu("Item Search",'f',3,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixWSDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',4,"ActFromWSDsm");
  end;
  if (HasModPO) then begin
    SpecialMenu("Purchase Order",' ',5,"POFromWSDsm");
  end;
  if (HasReturnedGoods) then begin
    SpecialMenu("Returned Goods",'B',6,"RetFromWSDsm");
  end;
//  SpecMenuItem("Work Sheet Status",'r',4);
  EndWindow;
end;

window INDClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  LongInt bm,lt,rt,tp;

  BlockLoad(CYb);
  WindowBegin("Item",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Image");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
    Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"No.",Normal,Code,false,0);
  EditField(h2,v,80,"Group",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Description",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternative Code",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"#Jewellery#"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"#Stock#"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Recipe"); tilenr = tilenr + 1;
  TileButton(tilenr,"A/C"); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Image"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Varieties"); tilenr = tilenr + 1;
  TileButton(tilenr,"Texts"); tilenr = tilenr + 1;
  TileButton(tilenr,"Cost Model"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"User Values"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Closed",Terminated);
  CheckBox(h2,v,0,"Not For Sales",NotForSales);
  if (GuiType==kGuiiPhone) then begin
    GetScreenSize(CurWindow,tp,lt,bm,rt);
    Pict_Field(5,v+=20,rt-10,bm-10,"");
  end;
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Unit",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Base Price",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Base Price Change",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Price Factor",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100,"Item Formula",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Markup %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Bonus %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Tags/Objects",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
    EditField(h,v+=vs,-240,"Classification",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
    ButtonFrame(h1,v=24,120,4,"Item Type");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Item Type");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Plain",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"#Stocked# Item",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Structured Item",ItemType);
  if (StandardHansa==false) then begin
    RadioButton(h1,v+=16,kItemTypeService,0,"Service",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Add picture");
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1,v+=32,0,"Treat Item as Material on Project",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"#Colour#",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serial Number Tracking");
  RadioButton(h1,v,0,0,"None",SerNrf);
  RadioButton(h1,v+=16,1,0,"Unit Number",SerNrf);
  RadioButton(h1,v+=16,2,0,"Batch Number",SerNrf);
  CheckBox(h1+200,v,0,"Do not Require Batch No. on POS Invoice",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Minimum Level",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maximum Level",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Department",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Shelf Code",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Default Source",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Environment Tax per #Kilo#",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Default Order Type",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Hazard Level",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"Alcohol %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
      EditField(h6,v, 80,"Stock Item Type",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Unit 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Conversion 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Unit Coefficient",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Conversion 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tihedus",Normal,Density,true,0);
    EditField(h5,v ,50,"Weight",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6) ,100,"Default Pallet Item",Normal,DefPalletItem,true,INSClass);
    EditField(h5,v ,80,"Picking Area",Normal,PickArea,false,LocAreaSClass);
    EditField(h,v+=vs ,100,"Default Location Area",Normal,LocArea,false,LocAreaSClass);
    EditField(h5,v ,50,"Pallets In Picking Area",Normal,PalletsInPickArea,true,0);
    EditField(h,v+=vs ,50,"Max. Qty on Pallet",Normal,QtyonPallet,true,0);
    EditField(h4,v ,50,"Pallet Layers",Normal,PalletLayers,true,0);
    EditField(h5,v ,50,"Qty per Layer",Normal,QtyonPalletLayer,true,0);
    EditField(h,v+=vs ,50,"Full Pallet Width",Normal,PalletWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,PalletHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,PalletDepth,true,0);
    EditField(h,v+=vs ,50,"Default Position Width",Normal,DefPosWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,DefPosHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,DefPosDepth,true,0);
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Density",Normal,Density,true,0);
    EditField(h5,v ,50,"Net Weight",Normal,NetWeight,true,0);
    EditField(h5,v+=vs ,50,"Weight",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Cost Price",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h5,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Cost Price in Base 2",Normal,InPriceB2,true,0);
    ButtonFrame(h1,v+=24,200,4,"Upd. Cost Price at Goods Receipt");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Upd. Cost Price at Goods Receipt");
  end;
  RadioButton(h1,v,0,0,"No",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Last Purchase Cost (incl. extras)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Weighted Average",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Last Purchase Cost (excl. extras)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Upd. Cost Price at #Stock# Revaluation");
  RadioButton(h5,v,0,0,"No",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Last Revaluation Cost",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Weighted Average",SRUpdateCost);
  if (StandardHansa==false) then begin
    EditField(h,v=vm+2*vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end;
  EditField(h,v+=vs ,100,"Weighted Average",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Weighted Av., Base 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Last Pur. Cost (incl. extras)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Last Pur. Price (excl. extras)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Last Purchase Currency",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fixed Freight",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Include Item Fixed Charge",InclItemFreight);
  CheckBox(h5,v,0,"Has Excise",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Recipe",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Paste Components during Entry",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Invoice Recipe",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Barcode",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Contract Item",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Commodity Code",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Rental Invoicing",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"EKN Code",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Classification of Products and Services",Normal,CPSCode,false,0);
  end;
  if (HasLocalization("LVA")) then begin
    EditField(h,v+=vs,55,"Fiscal Department",Normal,FiscalDep,false,0);
  end;
  EditField(h,v+=vs ,120,"Warranty Months",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"#Colour#",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Sort Code",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"Alternative Code",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Warning",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"#Dom.# Sales A/C",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,55,"Serv. Invble Sales A/C",Normal,SVOInvbleSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Components Usage",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. Materials Usage A/C",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"#Dom.# Cost A/C",Normal,CostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,VATZoneNameENG & "Cost A/C",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Export Cost A/C",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,55,"Serv. Invble Cost A/C",Normal,SVOInvbleCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Warranty Cost A/C",Normal,SVOWarrantyCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Contract Cost A/C",Normal,SVOContractCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Goodwill Cost A/C",Normal,SVOGoodwillCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Hotel WIP A/C",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=540,v=vm,20,"#Dom.# #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
    CheckBox(h2,v+=20,0,"Calculate Perception Taxes",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
      CheckBox(h2,v+=16,0,"Calculate Withholding Taxes",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      EditField(h2=670,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=680;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h2,v,20,"Reverse #VAT# Code",Normal,RvrsVATCode,false,VATCodeSClass); v = v + vs;
    end;
    if (HasLocalization("SWE")) then begin
      EditField(h2,v,20,"Chemical Tax Code",Normal,ChemicalTaxCode,false,ChemicalTaxCodeSClass); v = v + vs;
    end;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Variety Mask",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Report Order",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Subsets",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Language",0,LangCode,false,LangSClass);
  MatCol(1,94,"Text",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Primary Cost Model");
  RadioButton(h,v,0,0,"Default",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Cost Price",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _of Base Price",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Weighted Average",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Queued",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"None",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Queued Cost Model");
  RadioButton(h,v,0,0,"Default",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO Price",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO Price",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Cost Price for Serial Number");
  RadioButton(h2,v,0,0,"Default",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Cost Price not for Serial Number",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Cost Price for Serial Number",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Queued Cost Model per Location");
  RadioButton(h2,v,0,0,"Default",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Queued Cost not per Location",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Queued Cost per Location",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"WA per Location");
  RadioButton(h2,v,0,0,"Default",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"WA not per Location",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"WA per Location",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
  RadioButton(h2,v,0,0,"Default",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
    h = 180; v = 6;
    label = UserDefined("INVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("INVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("INVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("INVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("INVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("INVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefined("INVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefined("INVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;
    label = UserDefined("INVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
    end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status Report",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Recalculate Price List",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    SpecialMenu("Item History",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Item Location Status",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  SpecialMenu("Open Extended description",' ',6,"BPIINTextFromINDsm");// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 06 12 2018 y. at 11:42:11 AM
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Purchase Item",' ',1,"PIFromINDsm");
  SpecialMenu("Recipe",' ',2,"RecFromINDsm");
  
  EndWindow;
end;

window CashierDefTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("POS Settings",CashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(CashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v,70,"Default Customer",Normal,DefCustCode,false,CUSClass);
  if (HasModNL) then begin
    EditField(h,v+=vs,70,"Back Office A/C",Normal,CredAcc,false,AccSClass);
    EditField(h,v+=vs,70,"Writeoff A/C",Normal,WriteOffAcc,false,AccSClass);
  end;
  if (HasModRest) then begin
    EditField(h,v+=vs,70,"Tip Payment Mode",Normal,TipPMCode,false,PMSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,70,"Printer",Normal,Printer,false,SetSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,70,"Senior Citizen Disc. Item",Normal,DiscountItem,false,INSClass);
    end;
  end;
  if (HasModIN) then begin
    if (IsEnterprise) then begin
      chkbx = 2;
      if (HasLocalization("LVA")) then begin
        chkbx = 4;
      end;
      ButtonFrame(h-130,v+=3*vs+chkbx*16,490,2,"POS");
    end else begin
      v = v+40;
      if (HasLocalization("LVA")) then begin
        v = v+3*16;
      end;
      if (HasModRest) then begin
        ButtonFrame(h-130,v,490,2,"POS");
      end else begin
        v = v;
      end;
    end;
    EditField(h,v,70,"Update #Stock# Interval",Normal,UpdStockMaintTime,false,PasteCurTime);
//    ButtonFrame(h2,v,170,3,"Run Update #Stock# Maintenance");
//    RadioButton(h2,v,0,0,"Manually",UpdStockMaint);
//    RadioButton(h2,v+=16,1,0,"Periodically",UpdStockMaint);
//    RadioButton(h2,v+=16,2,0,"When OKing POS Invoice",UpdStockMaint);

    CheckBox(h2,v,0,"Run Update #Stock# Maintenance",UpdStockMaint);
    CheckBox(h2,v+=18,0,"OK #Stock Depreciations#",POSOKSD);
  end;
  if (HasModIN) then begin
    ButtonFrame(h-130,v+=40,490,2,"#Restaurant#");
    EditField(h,v,70,"Update #Stock# Interval",Normal,RestUpdStockMaintTime,false,PasteCurTime);
    CheckBox(h2,v,0,"Run Update #Stock# Maintenance",RestUpdStockMaint);
    CheckBox(h2,v+=18,0,"OK #Stock Depreciations#",RestOKSD);
//    CheckBox(h2,v,0,"OK #Goods Receipts#",OKPU);
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h-130,v+=40,490,2,"Cash Up");
    EditField(h,v,70,"Cash Up Interval",Normal,CashupMaintInterval,false,PasteCurTime);
    CheckBox(h2,v,0,"Run Cash Up Maintenance",CashupMaint);
    CheckBox(h2,v+=18,0,"Require Open Session",RequireOpenSession);
  end;
//  EditField(h,v+=vs,60,"POS No.",Normal,POSNr,false,0);
  ButtonFrame(h-130,vm2=(v+=37+vs),220,3,"Item Pictures on Cashier Screen");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Default",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"On",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Off",ItemPictureCashier);
  if (BuildProductCode=="PAYYAPERP") then begin
    CheckBox(h2,vm2,0,"Require Open Session",RequireOpenSession);
  end;
  ButtonFrame(h-130,v+=40,220,3,"Item Pictures on Customer Screen");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Default",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"On",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Off",ItemPictureCustomer);
  v = vm + 3;
  if (HasModRest) then begin
    CheckBox(h2,v,0,"Include Tip in Cash Up",InclTipInCashup);
    v = v + 16;
  end;
  if (IsEnterprise) then begin
    if (HasModSL) then begin
//      CheckBox(h2,v,0,"Include Open Invoice value in Cash Up",InclOpenInvCashup);
//      v = v + 16;
    end;
  end;
  if (HasLocalization("LVA")) then begin
    CheckBox(h2,v,0,"Don't allow zero Quantities",NoZeroQty);v = v + 16;
    CheckBox(h2,v,0,"Check #VAT# Reg. No when inserting Items with Reverse #VAT#",CheckVATNo);v = v + 16;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      CheckBox(h2,v,0,"Register Sales in Fiscal Control Unit",CashSalesToFiscalControlUnit);
      v = v + 16;
    end;
    CheckBox(h2,v,0,"Allow Multiple Sessions per Machine",MultipleSessionsPerLocalMachine);
    CheckBox(h2,v+=16,0,"Disallow Changes to OKed POS Invoices on Live Sync Clients",NoChangesPOSOnLiveSyncClient);
    CheckBox(h2,v+=16,0,"Require Return Reason",RequireReturnReason);
    CheckBox(h2,v+=16,0,"Require Return Customer",RequireReturnCustomer);
    if (HasLocalization("LVA")) then begin
      CheckBox(h2,v+=16,0,"Don't allow zero Quantities",NoZeroQty);
    end;
    CheckBox(h2,v+=16,0,"Sales to non fiscal customers",AlwaysFiscal);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 03 01 2019 y. at 11:15:35 AM
  end;

if (HasModNL) then begin
    ButtonFrame(h2,v+=45,220,2,"Cash Up from Operations Menu");
    CheckBox(h2,v,0,"Start from Previous POS Balance",StartFromLastPOSBal);
    if (HasModNL) then begin
      CheckBox(h2,v+=16,0,"Print Detailed #N/L# Transaction",PrintDetNLTrans);
    end;
    EndFrame;
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm2,170,3,"Default Field on New Invoice");
    RadioButton(h2,v,0,0,"Default",DefInvoiceField);
    RadioButton(h2,v+=16,1,0,"Item",DefInvoiceField);
    if (HasSerialNumbers) then begin
      RadioButton(h2,v+=16,2,0,"Serial No.",DefInvoiceField);
    end;
    EndFrame;
  end;
  EndWindow;
end;