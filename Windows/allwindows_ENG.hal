external inner procedure RateField(real,real,real,string,integer,string,boolean,real,real,string,boolean);
external inner procedure GetCurUser(var record UserVc);
external inner function string 60 UserDefined(string,string);
external inner function Boolean CheckOffLineRecords(Boolean);
external inner function Boolean UseTaxTemplatesforTaxCalc();
external inner function string 20 GetMenuCode(string);

external inner function Boolean HasCharts();

external inner function Boolean DisplayLoginKeyPad_ENG();
external inner function string 255 VATZoneEditFieldLabel_ENG(Integer);
external inner function real VATZoneButtonsLabelsENG(real,real,real,real);
external inner function string 255 VATZoneNameENG();

external inner function Boolean IsEnterprise();
external inner function Boolean StandardHansa();

external inner function Boolean HasBase2();
external inner function Boolean HasExtTax();
external inner function Boolean HasJewelleryInterface();
external inner function Boolean HasItemClassification();
external inner function Boolean HasLanguages();
external inner function Boolean HasMultiCurrency();
external inner function Boolean HasMultiLocations();
external inner function Boolean HasObjects();
external inner function Boolean HasPriceLists();
external inner function Boolean HasReturnedGoods();
external inner function Boolean HasSerialNumbers();
external inner function Boolean HasTaxMatrix();
external inner function Boolean HasVATZone();
external inner function Boolean HasWithholdingTax();

external inner function Boolean HasModCRM();
external inner function Boolean HasModIN();
external inner function Boolean HasModNL();
external inner function Boolean HasModPO();
external inner function Boolean HasModProd();
external inner function Boolean HasModRest();
external inner function Boolean HasModSL();
external inner function Boolean HasModSVO();
external inner function Boolean HasIntegratedNL();

external inner function Boolean HasVarieties();
external inner function Boolean HasSalesGroup();
external inner function Boolean HasTREO();
external inner function Boolean HasApprovals();
external inner function Boolean HasDownpayments();
external inner function Boolean HasEMail();
external inner function Boolean HasModTS();
external inner function Boolean HasCommunicator();
external inner function Boolean HasOfficialSerNr();
external inner function Boolean HasModSO();
external inner function Boolean HasAdvancedCRM();
external inner function Boolean HasSalesman();
external inner function Boolean HasSalesmanBonus();
external inner function Boolean HasStandardCRM();
external inner function Boolean HasCustItem();
external inner function Boolean HasRoute();
external inner function Boolean HasAdvancedPricing();
external inner function Boolean HasCountryPerCustomer();
external inner function Boolean HasCustomerStatusReport();
external inner function Boolean HasAvalara();
external inner function Boolean HasModPOS();
external inner function Boolean HasModCredMan();




window SVOSerDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,t,v,vs;
  WindowBegin("Known Serial Number",SVOSerDClass,CGview,SVOSerView);
  SetWRect(20,80,552,600);
  UseView(SVOSerVc);
  v = 6; vs = 20; h = 120; h2 = 290;
  Tile(0,90,false,"",ItemCode);
  EditField(h,v, 100,"Item",Normal,ItemCode,false,INSClass);
  EditField(h2,v,-40,"Serial No.",Normal,SerialNr,false,0);
  EditField(h,v+=vs,-40,"Desc.",Normal,ItemName,false,0);
  EditField(h,v+=vs,100,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h2,v,-40,"Name",Normal,CustName,false,0);
  h2 = 350;
  TileButton(1,"General");
  TileButton(2,"Warranty Information");
  TileButton(3,"Part Details");
  Tile(1,170,false,"",SoldDate);
  EditField(h,v=6,110,"Sold",Normal,SoldDate,false,PasteCurDate);
  EditField(h2,v,-40,"Warranty Until",Normal,WarrantyUntil,false,PasteCurDate);
  EditField(h,v+=vs,110,"Sales Price",Normal,SalesPrice,true,0);
  EditField(h2,v,-40,"Cost Price",Normal,CostPrice,true,0);
  EditField(h,v+=vs,110,"#Supplier#",Normal,VECode,false,VESClass);
  EditField(h2,v,-40,"Mother No.",Normal,MotherNr,false,SVOSerSClass);
  EditField(h,v+=vs,110,"Last GSX Query",Normal,LastGSXQuery,true,0);
  EditField(h2,v,-40,"Price List",Normal,PLCode,false,PLDefSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. Ð¾ 15:26:18
  Tile(2,450,false,"",ProductDescription);

  EditField(h,v=6,-40,"Product Descr.",Normal,ProductDescription,false,0);
  EditField(h,v+=vs,-40,"Config Descr.",Normal,ConfigDescription,false,0);
  EditField(h,v+=vs,110,"Purchase Country",Normal,PurchaseCountry,false,0);
  EditField(h2,v,-40,"Est. Purchase Date",Normal,EstimatedPurchaseDate,true,PasteCurDate);
  CheckBox(h,v+=vs,0,"#Personalised#",Personalized);

  CheckBox(h,v+=vs,0,"Global Warranty",GlobalWarranty);
  CheckBox(h2,v,0,"Limited Warranty",LimitedWarranty);
  EditField(h,v+=vs,-40,"Warranty Status",Normal,WarrantyStatus,false,0);

  EditField(h,v+=vs,110,"Registration Date",Normal,RegistrationDate,true,PasteCurDate);
  EditField(h2,v,-40,"Warranty Ref No",Normal,WarrantyRefNo,false,0);

  EditField(h,v+=vs,110,"Warranty From",Normal,CoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Warranty Until",Normal,WarrantyUntil,true,PasteCurDate);
  EditField(h,v+=vs,110,"On Site From",Normal,OnsiteStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"On Site Until",Normal,OnsiteEndDate,true,PasteCurDate);
  EditField(h,v+=vs,110,"CS Code",Normal,CSCode,false,0);
  EditField(h2,v,-40,"CS Type",Normal,CSType,false,0);

  CheckBox(h,v+=vs,0,"Powertrain",PowerTrainFlag);
  CheckBox(h,v+=vs,0,"TriCare",TriCareFlag);
  CheckBox(h2,v,0,"Ecorath",EcorathFlag);

  EditField(h,v+=vs,110,"Contract Type",Normal,ContractType,false,0);
  EditField(h,v+=vs,110,"Contract From",Normal,ContractCoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Contract Until",Normal,ContractCoverageEndDate,true,PasteCurDate);
  EditField(h,v+=vs,-40,"SLA Group Descr.",Normal,SLAGroupDesc,false,0);

  CheckBox(h,v+=vs,0,"#Labour# Covered",LaborCovered);
  CheckBox(h2,v,0,"Part Covered",PartCovered);

  EditField(h,v+=vs,-40,"Image",Normal,ImageURL,false,0);
  EditField(h,v+=vs,-40,"Exploded View",Normal,ExplodedViewURL,false,0);
  EditField(h,v+=vs,-40,"Manual",Normal,ManualURL,false,0);

  EditField(h,v+=vs,110,"Contract Cov. Start",Normal,ContractCoverageStartDate,true,PasteCurDate);
  EditField(h2,v,-40,"Contract Cov. End",Normal,ContractCoverageEndDate,true,PasteCurDate);

  EditField(h,v+=vs,110,"APP Agr. No.",Normal,APPAgreementNumber,true,0);
  EditField(h2,v,-40,"APP Total",Normal,APPTotalFromOrder,true,0);

  EditField(h,v+=vs,-40,"APP  Statement",Normal,APPCoverageDurationStatement,true,0);

  Tile(3,200,false,"",Math);
  v = 24;
  MatrixBegin(20,v,-40,-10,-,999);
  Flip(0);
  MatCol(t=1,32,"Part Number",0,PartNumber,false,0);
  Flip(1);
  MatCol(t,120,"Part Description",0,PartDescription,false,0);
  MatCol(t,-180,"#Stock# Price",0,StockPrice,true,0);
  MatCol(t,-90,"Exchange Price",0,ExchangePrice,true,0);
  Flip(2);
  MatCol(t,120,"Part Type",0,PartType,false,0);
  MatCol(t,-190,"Comp. Code",0,ComponentCode,false,0);
  MatCol(t,-110,"Orig. Part No.",0,OriginalPartNumber,false,0);
  Flip(3);
  MatCol(t,120,"EEE Code",0,EEECode,false,0);
  MatCol(t,-130,"#Labour# Tier",0,LaborTier,false,0);
  MatCol(t,-40,"Serial.",0,IsSerialized,false,0);
  EndMatrix;
  vs = 20;
  v = 18; VTab(-25,v,-6,v+vs,ToolFlip,1,"A");
  v=v+vs; VTab(-25,v,-6,v+vs,ToolFlip,2,"B");
  v=v+vs; VTab(-25,v,-6,v+vs,ToolFlip,3,"C");
  SpecialMenu("Open selected Link in Browser",'w',1,"OpenLinkSVOSerDsm");
//  SpecialMenu("Update Parts Item Prices from Warranty Check",' ',2,"PartsLookupSVOSerDsm"); //?? WNS
  SpecialMenu("Parts Lookup",'l',2,"PartsLookupSVOSerDsm");
  SpecialMenu("Serial Number History",'h',3,"SerHistSVOSerDsm");
  EndWindow;
end;

window WSDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs;
  Integer rn,tilenr,flipnr,f;
  
  WindowBegin("Work Sheet",WSDClass,CGview,WSView);
  SetWRect(20,80,750,460);
  Sizeable(512,-1,0,0);
  UseView(WSVc);
  FormName(WSForm);
  h1 = 75;h2 = 290; h3 = 470; vs = 20;
  Tile(0,70,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EditField(h=240,v=vm,-40,"Name",Normal,Addr0,false,0);
  v = v+vs;
  CheckBox(h4=-100,v,0,"OK",OKFlag);
  tilenr = 1;
  TileButton(tilenr,"Date"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Contact"); tilenr = tilenr + 1;
  TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  tilenr = 1;
  Tile(tilenr,90,false,tilenr,TransDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Employee",Normal,EMCode,false,UserSClass);
  EditField(h1,v+=vs,82,"Date",Normal,TransDate,false,PasteCurDate);
  if (HasMultiLocations) then begin
    EditField(h1,v+=vs,82,"Location",Normal,Location,false,LocationSClass);
  end;
  EditField(h1,v+=vs,82,"Short Code",Normal,ACShort,false,ACShortSClass);
  EditField(h2,v=vm,135,"Employee Name",Normal,EMName,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Cost A/C",Normal,CostAcc,false,AccSClass);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  EditField(h3,v=vm,82,"Serv. Order No.",Normal,SVONr,false,0);
  if (HasModSVO) then begin
    EditField(h3,v+=vs,82,"Work Order No.",Normal,WONr,false,0);
  end;
  if (HasModIN) then begin
    CheckBox(h4,v=vm,0,"Update #Stock#",UpdStockFlag);
  end;
  if (IsEnterprise) then begin
    CheckBox(h4,v+=16,0,"Reserved",PrelOK);
  end;
/* What is this???, It can be changed by the user and what if half is invoiced ?? */
//  CheckBox(h4,v+=16,0,"Invoiced",InvFlag);
  EnterSkip(Math);
  Tile(tilenr,120,true,tilenr,Math); tilenr = tilenr + 1;
  EditField(410,-41,95,"#VAT#",ViewOnly ,Sum3,true,0);
  EditField(-150,-41,95,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,95,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-40,WSRowType,200);
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=1,32,"Item",0,ArtCode,false,INSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
	MatCol(t,94,"S-Time",0,sTime,true,PasteCurTime);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. Ð¾ 16:58:48
	MatCol(t,150,"E-Time",0,eTime,true,PasteCurTime);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 27 09 2018 y. Ð¾ 16:58:50
  MatCol(t,205,"Qty",0,Quant,true,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 November 2018 16:43:46
  EnterSkip(ArtCode);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,244,"Description",0,Spec,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - Tuesday, 13 November 2018 16:44:00
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-255,"Unit Price",0,Price,true,0);
    MatCol(t,-165,"%",0,vRebate,true,0);
    MatCol(t,-130,"Sum",0,Sum,true,0);
    MatCol(1,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-225,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    MatCol(1,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-225,"Item Type",0,ItemType,false,SetSClass);
  MatCol(t,-150,"Main Serial No.",0,MotherNr,false,SerialNrSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  if (HasSerialNumbers) then begin
  MatCol(t,-225,"Serial No.",0,SerialNr,false,SerialNrSClass);
  end;
  if (HasModProd) then begin
  MatCol(t,-90,"Recipe",0,Recepy,false,RecSClass);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  MatCol(t=1,144,"Description",0,Spec,false,0);
  MatCol(t,-345,"Returned",0,Returned,true,0);
  MatCol(t,-285,"Invoiced",0,Invd,true,0);
  MatCol(t,-225,"FIFO",0,FIFO,false,0);
  MatCol(t,-125,"Row FIFO",0,FIFORowVal,false,0);
  if (HasModNL) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"Short Code",0,ACShort,false,ACShortSClass);
    MatCol(t,-270,"Sales A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-200,"Cost A/C",0,CostAcc,false,AccSClass);
    if (HasObjects) then begin
      MatCol(t,-130,"Tags/Objects",0,Objects,false,ObjSClass);
    end;
  end;
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusWSDsm");
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; 
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-35,v,-16,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;
  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,CurncyCode); tilenr = tilenr + 1;
  vs = 20;
  EditField(h=110,v=6,50,"Currency",ViewOnly,CurncyCode,false,CurncyCodeSClass);
  if (HasMultiCurrency) then begin
    if (HasBase2) then begin
      EditField(h,v+vs,50,"Base Currency 1",ViewOnly,BaseRate1,true,0);
    end else begin
      EditField(h,v+vs,50,"Base Currency",ViewOnly,BaseRate1,true,0);
    end;
    if (HasBase2) then begin
      EditField(h,v+(vs*2),50,"Base Currency 2",ViewOnly,BaseRate2,true,0);  
    end;  
    EditField(h2=295,v,50,"Rate",ViewOnly,FrRate,true,0);
    if (HasBase2) then begin
      RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
      RateField(h3,v+=vs,50,":",ViewOnly,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);   
      end else begin
        RateField(h3=360,v,50,":",ViewOnly,"ToRateB1",true,h3+60,v+14,"Base Currency",false);
      end;
    end else begin
      EditField(h,v+=vs,50,"Base Currency 1",ViewOnly,BaseRate1,true,0);
      EditField(h,v+=vs,50,"Base Currency 2",ViewOnly,BaseRate2,true,0);
    end;
  end; 
  Tile(tilenr,130,false,tilenr,Phone); tilenr = tilenr + 1;
  vs = 20;h = 75;h2 = 300;
  EditField(h,vm=(v=6),150,"Telephone",Normal,Phone,false,0);
  EditField(h,v+=vs,150,"Fax",Normal,Fax,false,0);
  if (IsEnterprise) then begin
    EditField(h,v+=vs,200,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
  end;
  if (HasLanguages) then begin 
    EditField(h,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  if (HasPriceLists) then begin
    EditField(h,v+=vs,80,"Price List",Normal,PriceList,false,PLDefSClass);
  end;
  if (HasVATZone) then begin
    v = VATZoneButtonsLabelsENG(h2,v=vm+vs,170,16);
  end;
  Tile(tilenr,90,false,tilenr,Comment1); tilenr = tilenr + 1; 
  vs = 20;
  EditField(h=75,v=6,-20,"Comment",Normal,Comment1,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h,v+=vs,-20,"",Normal,Comment4,false,0);
  EnterSkip(TransDate);
  if (HasModSVO) then begin
  SpecialMenu("Open Work Order",' ',0,"OpenWOFromWSDsm");
  end;
  if (HasIntegratedNL) then begin
    SpecialMenu("Open #NL# Transaction",'t',1,"OpenTRFromWS");
  end;
  SpecialMenu("Item Search",'f',3,"ItemSearchDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixWSDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModCRM) then begin
//    SpecialMenu("Activity",'c',4,"ActFromWSDsm");
  end;
  if (HasModPO) then begin
    SpecialMenu("Purchase Order",' ',5,"POFromWSDsm");
  end;
  if (HasReturnedGoods) then begin
    SpecialMenu("Returned Goods",'B',6,"RetFromWSDsm");
  end;
//  SpecMenuItem("Work Sheet Status",'r',4);
  EndWindow;
end;

window INDClass:8
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  integer tilenr;
  real h,h1,h2,h3,h4,h5,h6,v,vm,vs;
  string 255 label;
  record CYBlock CYb;
  LongInt bm,lt,rt,tp;

  BlockLoad(CYb);
  WindowBegin("Item",INDClass,CGview,-);
  SetWRect(20,80,830,400);
  Sizeable(-1,-1,-1,0);
  DynamicWindow;
  UseView(INVc);
  if (GuiType==kGuiAndroid) then begin
    ToolBar;
    PushButton(-110,5,-10,25,ToolImagePicker,"Image");
    EndToolBar;
  end;

  if (HasJewelleryInterface) then begin
    Tile(0,107,false,"",Code);
  end else begin
    Tile(0,87,false,"",Code);
  end;
  v = 6; vs = 20; h = 155; h1 = 300; h2 = 385; h3 = 395; h4 = 285; h5 = 433;
  EditField(h,v, 150,"No.",Normal,Code,false,0);
  EditField(h2,v,80,"Group",Normal,Group,false,ITSClass);
  EditField(h,v+=vs,-40,"Description",Normal,Name,false,0);
  if (HasJewelleryInterface) then begin
    EditField(h,v+=vs,150,"Alternative Code",Normal,AlternativeCode,false,0);
  end;
  tilenr = 1;
  TileButton(tilenr,"Pricing"); tilenr = tilenr + 1;
  if (HasJewelleryInterface) then begin
    TileButton(tilenr,"#Jewellery#"); tilenr = tilenr + 1;
    TileButton(tilenr,"Watch"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"#Stock#"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"Warehouse"); tilenr = tilenr + 1;
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
    TileButton(tilenr,"Costs"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Recipe"); tilenr = tilenr + 1;
  TileButton(tilenr,"A/C"); tilenr = tilenr + 1;
  if (GuiType==kGuiiPhone) then begin
    TileButton(tilenr,"Image"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Varieties"); tilenr = tilenr + 1;
  TileButton(tilenr,"Texts"); tilenr = tilenr + 1;
  TileButton(tilenr,"Cost Model"); tilenr = tilenr + 1;
  if (StandardHansa==false) then begin
    TileButton(tilenr,"User Values"); tilenr = tilenr + 1;
  end;
  TileButton(tilenr,"Notes"); tilenr = tilenr + 1;
  if (HasCharts) then begin
    TileButton(tilenr,"BI"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  CheckBox(h,v+=vs,0,"Closed",Terminated);
  CheckBox(h2,v,0,"Not For Sales",NotForSales);
  if (GuiType==kGuiiPhone) then begin
    GetScreenSize(CurWindow,tp,lt,bm,rt);
    Pict_Field(5,v+=20,rt-10,bm-10,"");
  end;
  Tile(tilenr,209,false,tilenr,Unittext); tilenr = tilenr + 1;
  EditField(h,v=6 ,100,"Unit",Normal,Unittext,false,UnitSClass);
  if (HasJewelleryInterface) and (UserCanAction("ViewCostPrice",true)) then begin
    EditField(h,v+=vs,100,"Cost Price",Normal,InPrice,true,0);
  end;
  EditField(h,v+=vs,100,"Base Price",Normal,UPrice1,true,0);
  EditField(h,v+=vs,100,"Base Price Change",ViewOnly,LastBasePriceChange,true,0);
  EditField(h,v+=vs,100,"Price Factor",Normal,PriceFactor,true,0);
  EditField(h,v+=vs,100,"Item Formula",Normal,CalcPrice,false,CPMSClass);
  EditField(h,v+=vs,100,"Markup %",Normal,Markup,true,0);
  EditField(h,v+=vs,100,"Bonus %",Normal,Bonus,true,0);
  EditField(h,v+=vs,-240,"Tags/Objects",Normal,Objects,false,ObjSClass);
  if (HasItemClassification) then begin
    EditField(h,v+=vs,-240,"Classification",Normal,DispGroups,false,DISClass);
  end;
  if (StandardHansa==false) then begin
    ButtonFrame(h1,v=24,120,4,"Item Type");
  end else begin
    ButtonFrame(h1,v=24,120,3,"Item Type");
  end;
  RadioButton(h1,v,kItemTypePlain,0,"Plain",ItemType);
  RadioButton(h1,v+=16,kItemTypeStocked,0,"#Stocked# Item",ItemType);
  RadioButton(h1,v+=16,kItemTypeStructured,0,"Structured Item",ItemType);
  if (StandardHansa==false) then begin
    RadioButton(h1,v+=16,kItemTypeService,0,"Service",ItemType);
  end;
  EndFrame;
  
  Pict_Field(-205,8,-35,178,"");
  if (GuiType==kGuiCocoa) then begin
    PushButton(-160,182,-80,202,ToolImagePicker,"Add picture");
  end;
  if (StandardHansa==false) then begin
    CheckBox(h1,v+=32,0,"Treat Item as Material on Project",ItemMaterial);
  end;
  if (HasJewelleryInterface) then begin
    Tile(tilenr,110,false,tilenr,Metal); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Metal",Normal,Metal,false,0);
    EditField(h,v+=vs, 140,"Weight",Normal,RowWeight,false,0);
    EditField(h,v+=vs, 140,"Size",Normal,Size,false,0);
    EditField(h,v+=vs, 140,"Length",Normal,Length,false,0);
    EditField(h,v+=vs, 140,"Reference",Normal,Reference,false,0);
    v = 6;
    EditField(h5,v, 140,"Major Stone Detail",Normal,MajStoneDet,false,0);
    EditField(h5,v+=vs, 140,"#Colour#",Normal,Colour,false,0);
    EditField(h5,v+=vs, 140,"Clarity",Normal,Clarity,false,0);
    EditField(h5,v+=vs, 140,"Certificate",Normal,Cert,false,0);
    EditField(h5,v+=vs, 140,"Minor Stone Detail",Normal,MinStoneDet,false,0);
    Tile(tilenr,90,false,tilenr,WatchBrand); tilenr = tilenr + 1;
    EditField(h,v=6, 140,"Watch Brand",Normal,WatchBrand,false,0);
    EditField(h,v+=vs, 140,"Style Name",Normal,StyleName,false,0);
    EditField(h,v+=vs, 140,"Watch Metal",Normal,WatchMetal,false,0);
    EditField(h,v+=vs, 140,"Movement",Normal,Movement,false,0);
    v = 6;
    EditField(h5,v, 140,"Bracelet/Strap",Normal,BrcStr,false,0);
    EditField(h5,v+=vs, 140,"Gender",Normal,Gender,false,0);
    EditField(h5,v+=vs, 140,"Other",Normal,Other,false,0);
    EditField(h5,v+=vs, 140,"Other2",Normal,Other2,false,0);
  end;
  Tile(tilenr,170,false,tilenr,MinLevel);  tilenr = tilenr + 1; // Need to clean this Tile up!
  v = 6;
  vm = v;
  ButtonFrame(h1,v+=24,143,3,"Serial Number Tracking");
  RadioButton(h1,v,0,0,"None",SerNrf);
  RadioButton(h1,v+=16,1,0,"Unit Number",SerNrf);
  RadioButton(h1,v+=16,2,0,"Batch Number",SerNrf);
  CheckBox(h1+200,v,0,"Do not Require Batch No. on POS Invoice",DonotRequireBatchNrOnIVCash);
  EditField(h,v=6,100,"Minimum Level",Normal,MinLevel,true,0);
  EditField(h,v+=vs,100,"Maximum Level",Normal,MaxLevel,true,0);
  EditField(h,v+=vs  ,100,"Department",Normal,Department,false,DepSClass);
  EditField(h,v+=vs  ,100,"Shelf Code",Normal,InvCode,false,0);
  EditField(h,v+=vs,100,"Default Source",Normal,DefaultSource,false,SourceSClass);
  EditField(h5,v ,50,"Environment Tax per #Kilo#",Normal,RepaPricePerWeight,true,0);
  EditField(h6=650,v ,80,"Default Order Type",Normal,DefOrderType,false,SetSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Hazard Level",Normal,HazLevCode,false,HazLevSClass);
    EditField(h5,v ,50,"Alcohol %",Normal,AlcPrc,true,0);
    if (HasLocalization("PRT")) then begin
      EditField(h6,v, 80,"Stock Item Type",Normal,StockItemType,false,SetSClass);
    end;
  end;
  EditField(h,v+=vs ,100,"Unit 2",Normal,Unittext2,false,UnitSClass);
  EditField(h5,v ,50,"Conversion 1",Normal,Conversion1,true,0);
  EditField(h,v+=vs,100,"Unit Coefficient",Normal,UnitCoefficient,true,0);
  EditField(h5,v ,50,"Conversion 2",Normal,Conversion2,true,0);
  if (StandardHansa==true) then begin
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Tihedus",Normal,Density,true,0);
    EditField(h5,v ,50,"Weight",Normal,Weight,true,0);
  end;
  if (StandardHansa==false) then begin
    Tile(tilenr,170,false,tilenr,LocArea);  tilenr = tilenr + 1;
    EditField(h,vm=(v=6) ,100,"Default Pallet Item",Normal,DefPalletItem,true,INSClass);
    EditField(h5,v ,80,"Picking Area",Normal,PickArea,false,LocAreaSClass);
    EditField(h,v+=vs ,100,"Default Location Area",Normal,LocArea,false,LocAreaSClass);
    EditField(h5,v ,50,"Pallets In Picking Area",Normal,PalletsInPickArea,true,0);
    EditField(h,v+=vs ,50,"Max. Qty on Pallet",Normal,QtyonPallet,true,0);
    EditField(h4,v ,50,"Pallet Layers",Normal,PalletLayers,true,0);
    EditField(h5,v ,50,"Qty per Layer",Normal,QtyonPalletLayer,true,0);
    EditField(h,v+=vs ,50,"Full Pallet Width",Normal,PalletWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,PalletHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,PalletDepth,true,0);
    EditField(h,v+=vs ,50,"Default Position Width",Normal,DefPosWidth,true,0);
    EditField(h4,v ,50,"Height",Normal,DefPosHeight,true,0);
    EditField(h5,v ,50,"Depth",Normal,DefPosDepth,true,0);
    EditField(h,v+=vs ,50,"Item Width",Normal,Width,true,0);
    EditField(h4,v ,50,"Height",Normal,Height,true,0);
    EditField(h5,v ,50,"Depth",Normal,Depth,true,0);
    EditField(h,v+=vs ,50,"Item Volume",Normal,Volume,true,0);
    EditField(h4,v ,50,"Density",Normal,Density,true,0);
    EditField(h5,v ,50,"Net Weight",Normal,NetWeight,true,0);
    EditField(h5,v+=vs ,50,"Weight",Normal,Weight,true,0);
  end;
  if (UserCanAction("ViewCostPrice",true)) then begin
  Tile(tilenr,190,false,tilenr,InPrice);  tilenr = tilenr + 1;
  EditField(h,vm=(v=6),100,"Cost Price",Normal,InPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h5,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end else begin
    EditField(h3,v,70,"Cost Price Change",ViewOnly,LastPriceChange,true,0);
  end;
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Cost Price in Base 2",Normal,InPriceB2,true,0);
    ButtonFrame(h1,v+=24,200,4,"Upd. Cost Price at Goods Receipt");
  end else begin
    ButtonFrame(h1,v+=40,210,4,"Upd. Cost Price at Goods Receipt");
  end;
  RadioButton(h1,v,0,0,"No",UpdateCost);
  RadioButton(h1,v+=16,1,0,"Last Purchase Cost (incl. extras)",UpdateCost);
  RadioButton(h1,v+=16,2,0,"Weighted Average",UpdateCost);
  RadioButton(h1,v+=16,3,0,"Last Purchase Cost (excl. extras)",UpdateCost);
  ButtonFrame(h5=540,v=v-3*16,200,3,"Upd. Cost Price at #Stock# Revaluation");
  RadioButton(h5,v,0,0,"No",SRUpdateCost);
  RadioButton(h5,v+=16,1,0,"Last Revaluation Cost",SRUpdateCost);
  RadioButton(h5,v+=16,2,0,"Weighted Average",SRUpdateCost);
  if (StandardHansa==false) then begin
    EditField(h,v=vm+2*vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end else begin
    EditField(h,v=vm+vs,100,"Extra Cost",Normal,ExtraCost,true,0);
  end;
  EditField(h,v+=vs ,100,"Weighted Average",Normal,WeighedAvPrice,true,0);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs ,100,"Weighted Av., Base 2",Normal,WeighedAvPriceB2,true,0);
  end;
  EditField(h,v+=vs ,100,"Last Pur. Cost (incl. extras)",Normal,LastPurchPrice,true,0);
  EditField(h,v+=vs ,100,"Last Pur. Price (excl. extras)",Normal,LastPurchPrice2,true,0);
  EditField(h,v+=vs ,100,"Last Purchase Currency",Normal,LastPurchCurncyCode,false,CurncyCodeSClass);
  EditField(h,v+=vs ,100,"Fixed Freight",Normal,FixedFreight,true,0);
  CheckBox(h1,v,0,"Include Item Fixed Charge",InclItemFreight);
  CheckBox(h5,v,0,"Has Excise",HasExcise);
  end;
  Tile(tilenr,170,false,tilenr,Recepy);  tilenr = tilenr + 1;
  EditField(h,v=6 ,120,"Recipe",Normal,Recepy,false,RecSClass);
  CheckBox(h1,v,0,"Paste Components during Entry",ExplodeRec); // "Show components on documents" is better English but VERY confusing
  EditField(h,v+=vs ,120,"Invoice Recipe",Normal,InvRecepy,false,RecSClass);
  EditField(h2,v,150,"Barcode",Normal,BarCode,false,0);
  EditField(h,v+=vs ,120,"Contract Item",Normal,ContractItem,false,INSClass);
  EditField(h2,v,150,"Commodity Code",Normal,EUCodex,false,CommoditySClass);
  v = v + vs;
  if (StandardHansa==false) then begin
    EditField(h,v,120,"Rental Invoicing",Normal,RentalItem,false,INSClass);
  end;
  EditField(h2,v,150,"EKN Code",Normal,EKNCode,false,0); // i think it is same as Commodity Code
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,150,"Classification of Products and Services",Normal,CPSCode,false,0);
  end;
  if (HasLocalization("LVA")) then begin
    EditField(h,v+=vs,55,"Fiscal Department",Normal,FiscalDep,false,0);
  end;
  EditField(h,v+=vs ,120,"Warranty Months",Normal,WarrantyLength,true,0);
  EditField(h2,v,150,"#Colour#",Normal,colnr,false,SetSClass);
  EditField(h,v+=vs,120,"Sort Code",Normal,SortCode,true,0);
  EditField(h,v+=vs,-40,"Alternative Code",Normal,AlternativeCode,false,0);
  EditField(h,v+=vs,-40,"Warning",Normal,WarnText1,false,0);
  Tile(tilenr,170,false,tilenr,SalesAcc);  tilenr = tilenr + 1;
  v = 6;
  vm = v;
  EditField(h,vm,55,"#Dom.# Sales A/C",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,VATZoneNameENG & "Sales A/C",Normal,EUSalesAcc,false,AccSClass);
  EditField(h,v+=vs,55,"Export Sales A/C",Normal,ExpSalesAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h,v+=vs,55,"Serv. Invble Sales A/C",Normal,SVOInvbleSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Warranty Sales A/C",Normal,SVOWarrantySalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Contract Sales A/C",Normal,SVOContractSalesAcc,false,AccSClass);
//     EditField(h,v+=vs,55,"Serv. Goodwill Sales A/C",Normal,SVOGoodwillSalesAcc,false,AccSClass);
  end;
  EditField(h,v+=vs,55,"Components Usage",Normal,CompUsage,false,AccSClass);
  EditField(h,v+=vs,55,"Proj. Materials Usage A/C",Normal,ProjMaterialsUsageAcc,false,AccSClass);

  EditField(h2=360,v=vm,55,"#Dom.# Cost A/C",Normal,CostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,VATZoneNameENG & "Cost A/C",Normal,EUCostAcc,false,AccSClass);
  EditField(h2,v+=vs,55,"Export Cost A/C",Normal,ExpCostAcc,false,AccSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,55,"Serv. Invble Cost A/C",Normal,SVOInvbleCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Warranty Cost A/C",Normal,SVOWarrantyCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Contract Cost A/C",Normal,SVOContractCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Serv. Goodwill Cost A/C",Normal,SVOGoodwillCostAcc,false,AccSClass);
    EditField(h2,v+=vs,55,"Hotel WIP A/C",Normal,HotelWIPAcc,false,AccSClass);
  end;
  EditField(h2=540,v=vm,20,"#Dom.# #VAT# Code",Normal,VATCode,false,VATCodeSClass);
  EditField(h2,v+=vs,20,VATZoneEditFieldLabel_ENG(1) & "#VAT# Code",Normal,VATCodeEU,false,VATCodeSClass);
  EditField(h2,v+=vs,20,"Export #VAT# Code",Normal,VATCodeExp,false,VATCodeSClass);
  if (HasExtTax) then begin
    CheckBox(h2,v+=20,0,"Calculate Perception Taxes",Perceptions);
  end;
  if (StandardHansa==false) then begin
    if (HasWithholdingTax) then begin
      CheckBox(h2,v+=16,0,"Calculate Withholding Taxes",Withholdings);
    end;
    if (CYb.UseTaxTemplatesforTaxCalc!=0) then begin
      EditField(h2=670,v=vm,50,"#Dom.# Tax Temp.",Normal,TaxTemplateCode,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,VATZoneEditFieldLabel_ENG(1) & "Tax Temp.",Normal,TaxTemplateCodeEU,false,TaxTemplateSClass);
      EditField(h2,v+=vs,50,"Export Tax Temp.",Normal,TaxTemplateCodeExp,false,TaxTemplateSClass);
    end;
    v = vm; h2=680;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(h2,v,20,"Reverse #VAT# Code",Normal,RvrsVATCode,false,VATCodeSClass); v = v + vs;
    end;
    if (HasLocalization("SWE")) then begin
      EditField(h2,v,20,"Chemical Tax Code",Normal,ChemicalTaxCode,false,ChemicalTaxCodeSClass); v = v + vs;
    end;
  end;
  if (GuiType==kGuiiPhone or GuiType==kGuiAndroid) then begin
    Tile(tilenr,70,false,tilenr,-);  tilenr = tilenr + 1;
    AttachmentDisplay(10,10,200,200);
//    PushButton(30,10,-80,40,ToolImagePicker,"Take picture");
//    ControlLabel(0,0,0,0,"Take picture","SystemFont",17,kTextStyleBold,AdjCenter,patM4ReportsTextBlue);
  end;
  Tile(tilenr,70,false,tilenr,VARMask);  tilenr = tilenr + 1;
  EditField(h,v=6,-40,"Variety Mask",Normal,VARMask,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Report Order",Normal,VARRepOrder,false,VARMasksSClass);
  EditField(h,v+=vs,-40,"Subsets",Normal,VARSubsets,false,VARSubsetsSClass);
  Tile(tilenr,120,true,tilenr,Math);  tilenr = tilenr + 1;
  v = 24;
  MatrixBegin(4,v,-32,-40,-,99);
  MatCol(1,24,"Language",0,LangCode,false,LangSClass);
  MatCol(1,94,"Text",0,Text,false,0);
  EndMatrix;
  Tile(tilenr,220,false,tilenr,CostPerc);  tilenr = tilenr + 1;
  ButtonFrame(h=100,vm=(v=20),230,6,"Primary Cost Model");
  RadioButton(h,v,0,0,"Default",PrimaryCostModel);
  RadioButton(h,v+=16,1,0,"Cost Price",PrimaryCostModel);
  RadioButton(h,v+=16,2,0,"% _of Base Price",PrimaryCostModel);
  EditField(h+150,v,55,"%",Normal,CostPerc,true,0);
  RadioButton(h,v+=16,3,0,"Weighted Average",PrimaryCostModel);
  RadioButton(h,v+=16,4,0,"Queued",PrimaryCostModel);
  RadioButton(h,v+=16,kCostModelNoneItem,0,"None",PrimaryCostModel);
  ButtonFrame(h,v+=40,230,3,"Queued Cost Model");
  RadioButton(h,v,0,0,"Default",QueuedCostModel);
  RadioButton(h,v+=16,1,0,"F_IFO Price",QueuedCostModel);
  RadioButton(h,v+=16,2,0,"LIFO Price",QueuedCostModel);

  ButtonFrame(h2=380,v=vm,200,3,"Cost Price for Serial Number");
  RadioButton(h2,v,0,0,"Default",FIFOPerSerialNr);
  RadioButton(h2,v+=16,1,0,"Cost Price not for Serial Number",FIFOPerSerialNr);
  RadioButton(h2,v+=16,2,0,"Cost Price for Serial Number",FIFOPerSerialNr);
  ButtonFrame(h2,v+=40,200,3,"Queued Cost Model per Location");
  RadioButton(h2,v,0,0,"Default",FIFOPerLocation);
  RadioButton(h2,v+=16,1,0,"Queued Cost not per Location",FIFOPerLocation);
  RadioButton(h2,v+=16,2,0,"Queued Cost per Location",FIFOPerLocation);
  ButtonFrame(h2,v+=40,200,3,"WA per Location");
  RadioButton(h2,v,0,0,"Default",WAPerLocation);
  RadioButton(h2,v+=16,1,0,"WA not per Location",WAPerLocation);
  RadioButton(h2,v+=16,2,0,"WA per Location",WAPerLocation);
/*5.3
  ButtonFrame(h2,v+=40,200,3,"Cost Price per Location");
  RadioButton(h2,v,0,0,"Default",CostPricePerLocation);
  RadioButton(h2,v+=16,1,0,"Cost Price not per Location",CostPricePerLocation);
  RadioButton(h2,v+=16,2,0,"Cost Price per Location",CostPricePerLocation);
*/
  if (StandardHansa==false) then begin
    Tile(tilenr,240,false,tilenr,-); tilenr = tilenr + 1;
    h = 180; v = 6;
    label = UserDefined("INVc","UserStr1");
    if (nonblank(label)) then begin
      EditField(h,v=6 ,-40,label,Normal,UserStr1,false,0);
    end;
    label = UserDefined("INVc","UserStr2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr2,false,0);
    end;
    label = UserDefined("INVc","UserStr3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr3,false,0);
    end;
    label = UserDefined("INVc","UserStr4");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr4,false,0);
    end;
    label = UserDefined("INVc","UserStr5");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,-40,label,Normal,UserStr5,false,0);
    end;
    label = UserDefined("INVc","UserVal1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal1,true,0);
    end;
    label = UserDefined("INVc","UserVal2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal2,true,0);
    end;
    label = UserDefined("INVc","UserVal3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,50,label,Normal,UserVal3,true,0);
    end;
    label = UserDefined("INVc","UserDate1");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate1,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate2");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate2,true,PasteCurDate);
    end;
    label = UserDefined("INVc","UserDate3");
    if (nonblank(label)) then begin
      EditField(h,v+=vs,80,label,Normal,UserDate3,true,PasteCurDate);
    end;
  end;
  Tile(tilenr,400,false,tilenr,Math2); tilenr = tilenr + 1;
  StaticText(50,v=20,"Notes",true);
  TextField(60,v-5,-20,370,Math2,0);
  if (HasCharts) then begin
    Tile(tilenr,400,false,tilenr,-); tilenr = tilenr + 1;
    ChartArea(10,6,-10,390,"$INDCLass_BIChart");
  end;
  if (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status Report",'I',0,"INStatusINDsm");
  end;
//  SpecMenuItem("Recalculate Price List",' ',2);
  if (UserCanReport("INrsRn","INrsRClass",true)) then begin
    SpecialMenu("Item History",'h',3,"INrsRn_INSm");//CMD H DOES HIDE HANSA
  end;
  SpecialMenu("Item Location Status",' ',4,"LocItemStatDsm");
  if (HasJewelleryInterface) and (UserCanReport("INInfoRn","",true)) then begin
    SpecialMenu("Item Status per Alternative Code",'S',5,"ItemStatusAltINDsm");
  end;
  SpecialMenu("Open Extended description",' ',6,"BPIINTextFromINDsm");// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 06 12 2018 y. at 11:42:11 AM
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  SpecialMenu("Purchase Item",' ',1,"PIFromINDsm");
  SpecialMenu("Recipe",' ',2,"RecFromINDsm");
  
  EndWindow;
end;

window CashierDefTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,v,vm,vm2,vs,chkbx;
  
  WindowBegin("POS Settings",CashierDefTClass,CGSbl,-);
  SetWRect(64,80,700,600);
  SetBlid(CashierDefBlock);
  v = 6; vs = 20; h = 150; h2 = 290; vm=0;
  EditField(h,v,70,"Default Customer",Normal,DefCustCode,false,CUSClass);
  if (HasModNL) then begin
    EditField(h,v+=vs,70,"Back Office A/C",Normal,CredAcc,false,AccSClass);
    EditField(h,v+=vs,70,"Writeoff A/C",Normal,WriteOffAcc,false,AccSClass);
  end;
  if (HasModRest) then begin
    EditField(h,v+=vs,70,"Tip Payment Mode",Normal,TipPMCode,false,PMSClass);
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,70,"Printer",Normal,Printer,false,SetSClass);
    if (StandardHansa==false) then begin
      EditField(h,v+=vs,70,"Senior Citizen Disc. Item",Normal,DiscountItem,false,INSClass);
    end;
  end;
  if (HasModIN) then begin
    if (IsEnterprise) then begin
      chkbx = 2;
      if (HasLocalization("LVA")) then begin
        chkbx = 4;
      end;
      ButtonFrame(h-130,v+=3*vs+chkbx*16,490,2,"POS");
    end else begin
      v = v+40;
      if (HasLocalization("LVA")) then begin
        v = v+3*16;
      end;
      if (HasModRest) then begin
        ButtonFrame(h-130,v,490,2,"POS");
      end else begin
        v = v;
      end;
    end;
    EditField(h,v,70,"Update #Stock# Interval",Normal,UpdStockMaintTime,false,PasteCurTime);
//    ButtonFrame(h2,v,170,3,"Run Update #Stock# Maintenance");
//    RadioButton(h2,v,0,0,"Manually",UpdStockMaint);
//    RadioButton(h2,v+=16,1,0,"Periodically",UpdStockMaint);
//    RadioButton(h2,v+=16,2,0,"When OKing POS Invoice",UpdStockMaint);

    CheckBox(h2,v,0,"Run Update #Stock# Maintenance",UpdStockMaint);
    CheckBox(h2,v+=18,0,"OK #Stock Depreciations#",POSOKSD);
  end;
  if (HasModIN) then begin
    ButtonFrame(h-130,v+=40,490,2,"#Restaurant#");
    EditField(h,v,70,"Update #Stock# Interval",Normal,RestUpdStockMaintTime,false,PasteCurTime);
    CheckBox(h2,v,0,"Run Update #Stock# Maintenance",RestUpdStockMaint);
    CheckBox(h2,v+=18,0,"OK #Stock Depreciations#",RestOKSD);
//    CheckBox(h2,v,0,"OK #Goods Receipts#",OKPU);
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h-130,v+=40,490,2,"Cash Up");
    EditField(h,v,70,"Cash Up Interval",Normal,CashupMaintInterval,false,PasteCurTime);
    CheckBox(h2,v,0,"Run Cash Up Maintenance",CashupMaint);
    CheckBox(h2,v+=18,0,"Require Open Session",RequireOpenSession);
  end;
//  EditField(h,v+=vs,60,"POS No.",Normal,POSNr,false,0);
  ButtonFrame(h-130,vm2=(v+=37+vs),220,3,"Item Pictures on Cashier Screen");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Default",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"On",ItemPictureCashier);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Off",ItemPictureCashier);
  if (BuildProductCode=="PAYYAPERP") then begin
    CheckBox(h2,vm2,0,"Require Open Session",RequireOpenSession);
  end;
  ButtonFrame(h-130,v+=40,220,3,"Item Pictures on Customer Screen");
  RadioButton(h,v,kPOSItemPictureDefault,0,"Default",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOn,0,"On",ItemPictureCustomer);
  RadioButton(h,v+=16,kPOSItemPictureOff,0,"Off",ItemPictureCustomer);
  v = vm + 3;
  if (HasModRest) then begin
    CheckBox(h2,v,0,"Include Tip in Cash Up",InclTipInCashup);
    v = v + 16;
  end;
  if (IsEnterprise) then begin
    if (HasModSL) then begin
//      CheckBox(h2,v,0,"Include Open Invoice value in Cash Up",InclOpenInvCashup);
//      v = v + 16;
    end;
  end;
  if (HasLocalization("LVA")) then begin
    CheckBox(h2,v,0,"Don't allow zero Quantities",NoZeroQty);v = v + 16;
    CheckBox(h2,v,0,"Check #VAT# Reg. No when inserting Items with Reverse #VAT#",CheckVATNo);v = v + 16;
  end;
  if (IsEnterprise) then begin
    if (StandardHansa==false) then begin
      CheckBox(h2,v,0,"Register Sales in Fiscal Control Unit",CashSalesToFiscalControlUnit);
      v = v + 16;
    end;
    CheckBox(h2,v,0,"Allow Multiple Sessions per Machine",MultipleSessionsPerLocalMachine);
    CheckBox(h2,v+=16,0,"Disallow Changes to OKed POS Invoices on Live Sync Clients",NoChangesPOSOnLiveSyncClient);
    CheckBox(h2,v+=16,0,"Require Return Reason",RequireReturnReason);
    CheckBox(h2,v+=16,0,"Require Return Customer",RequireReturnCustomer);
    if (HasLocalization("LVA")) then begin
      CheckBox(h2,v+=16,0,"Don't allow zero Quantities",NoZeroQty);
    end;
    CheckBox(h2,v+=16,0,"Sales to non fiscal customers",AlwaysFiscal);// Edit ************************** BPI Ukraine - KramarAlexandr - 04, 03 01 2019 y. at 11:15:35 AM
  end;

if (HasModNL) then begin
    ButtonFrame(h2,v+=45,220,2,"Cash Up from Operations Menu");
    CheckBox(h2,v,0,"Start from Previous POS Balance",StartFromLastPOSBal);
    if (HasModNL) then begin
      CheckBox(h2,v+=16,0,"Print Detailed #N/L# Transaction",PrintDetNLTrans);
    end;
    EndFrame;
  end;
  if (IsEnterprise) then begin
    ButtonFrame(h2,v=vm2,170,3,"Default Field on New Invoice");
    RadioButton(h2,v,0,0,"Default",DefInvoiceField);
    RadioButton(h2,v+=16,1,0,"Item",DefInvoiceField);
    if (HasSerialNumbers) then begin
      RadioButton(h2,v+=16,2,0,"Serial No.",DefInvoiceField);
    end;
    EndFrame;
  end;
  EndWindow;
end;

window ORDClass:2
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,t,v,vm,vs,h5,flipnr,width;
  string 255 label;
  Integer rn;
  
  WindowBegin("Order",ORDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(ORVc);
  ActiveFieldOnNew("CustCode");
  CommunicateButton;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,CUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (StandardHansa==false) then begin
    EditField(h,vm=(v+=20),135,"Official No.",Normal,OfficialSerNr,false,LegalInvNrSClass);
    CheckBox(h4=-100,v,0,"OK",OKFlag);
  end else begin
    CheckBox(h4=-100,vm=(v+=20),0,"OK",OKFlag);
  end;
  EditField(530,vm,70,"Apmokamas %",Normal,PPVal,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 16 01 2019 y. at 11:08:12 AM
//  CheckBox(h+120,vm,0,"Closed",Closed);
//  CheckBox(h+240,vm,0,"Reserved",Reserved);
  TileButton(1,"Terms");
  TileButton(2,"Items");
  TileButton(3,"Currency");
  TileButton(4,"Del. Terms");
  TileButton(5,"Price List");
  TileButton(6,"Inv. Address");
  TileButton(7,"Del. Address");
  Tile(1,110,false,"1",OrdDate);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,vm=(v=6),82,"Date",Normal,OrdDate,false,PasteCurDate);
  EditField(h1,v+=vs,35,"Payment Terms",Normal,PayDeal,false,PDSClass);
  EditField(h1,v+=vs,82,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
  EditField(h1,v+=vs,82,"#Despatch# Date",Normal,DespatchDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"#Despatch# Time",Normal,DespatchTime,false,PasteCurTime);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  EditField(h2,v+=vs,135,"Cust. Ord. No.",Normal,CustOrdNr,false,0);
  EditField(h3,v=vm,80,"#Salesman#",Normal,SalesMan,false,UserSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Project",Normal,PRCode,false,PRSClass);
  end;
  EditField(h3,v+=vs,80,"Order Class",Normal,OrderClass,false,OrderClassSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v+=vs,80,"Order Type",Normal,OrderType,false,SetSClass);
    EditField(h3,v+=vs,80,"Sales Contract",Normal,ORCONr,false,ORCOSClass);
  end;
  CheckBox(h4,v=6,0,"Closed",Closed);
  CheckBox(h4,v+=16,0,"Reserved",Reserved);
  EnterSkip(Math);
  Tile(2,220,true,"2",Math);
//  CheckBox(20,-20,0,"OK",OKFlag);
  EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"GP %",Normal,GPProc,true,0);
      EditField(160,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(310,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
      EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end else begin
      EditField(290,-41,70,"Tax2",ViewOnly,TAX2Sum,true,0);
      EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end;
    EditField(410,-41,100,"#VAT#",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"GP %",Normal,GPProc,true,0);
      EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"Tax",ViewOnly ,Sum3,true,0);
  end;
  EditField(410,-21,100,"Base",ViewOnly,BaseSum4,true,0);
  EditField(-150,-41,100,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  MatrixBegin(3,v,-50,-49,-,200);
  MatTypedRow(stp);
  flipnr = 0;
  Flip(flipnr); flipnr = flipnr + 1;
  MatText(t=9,32,"Subtotal",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatColTL(t,-80,"Sum",0,-1,ViewOnly,0,Sum,true,0);
  MatText(t=17,32,"Header",true);
  MatCol(t,100,"",0,Spec,false,0);
  MatCol(t=1,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  t = 1;
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatText(t=10,32,"This row and all rows below it will be hidden on printout",false);
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Description",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-235,"Unit Price",0,Price,true,0);  // use PL2SClass for filtered datalist
  MatCol(t,-135,"%",0,vRebate,true,0);
  MatCol(t,-100,"Sum",0,Sum,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Tag/Object",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Tag/Object",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UseTaxTemplatesforTaxCalc) then begin
    MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-164,"Tag/Object",0,Objects,false,ObjSClass);
    MatCol(t,-70,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
  end else begin
    MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
    MatCol(t,-184,"A/C",0,SalesAcc,false,AccSClass);
    MatCol(t,-124,"Tag/Object",0,Objects,false,ObjSClass);
    if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
      MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
    end else begin
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
    end;
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,344,"Order Type",0,OrderType,false,SetSClass);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Cost",0,BasePrice,true,0);
    MatCol(t,-70,"GP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  if (UserCanAction("ViewCostPrice",true)) then begin
    MatCol(t,-245,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-175,"%",0,vRebate,true,0);
    MatCol(t,-140,"Cost",0,BasePrice,true,0);
    MatCol(t,-70,"GP",0,rowGP,true,0);
  end else begin
    MatCol(t,-235,"Unit Price",0,Price,true,0); // use PL2SClass for filtered datalist
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Desc.",0,Spec,false,0);
  MatCol(t,-300,"#Salesmen#",0,Salesmen,false,UserSClass);
  MatCol(t,-236,"Del.",0,Shipd1,true,0);
  MatCol(t,-184,"Del. OK",0,Shipd2,true,0);
  MatCol(t,-132,"Invoiced",0,Invd,true,0);
  MatCol(t,-80,"Recipe",0,Recepy,false,RecSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Desc.",0,Spec,false,0);
  MatCol(t,-290,"Del.",0,Shipd1,true,0);
  MatCol(t,-220,"Del. OK",0,Shipd2,true,0);
  MatCol(t,-150,"Invoiced",0,Invd,true,0);
  MatCol(t,-80,"Recipe",0,Recepy,false,RecSClass);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-290,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Price Factor",0,PriceFactor,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-290,"Serial No.",0,SerialNr,false,SerialNrSClass);
  MatCol(t,-150,"Plan. Del.",0,PlanShipRow,true,PasteCurDate);
  MatCol(t,-70,"Price Factor",0,PriceFactor,true,0);
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Delivery Note",0,ShipNote,false,0);
  MatCol(t,-210,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Position",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Source",0,Source,true,SourceSClass);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Delivery Note",0,ShipNote,false,0);
  MatCol(t,-210,"Location",0,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    MatCol(t,-145,"Position",0,Position,true,UsedPosSClass);
  end;
  MatCol(t,-90,"Source",0,Source,true,SourceSClass);
  if (StandardHansa==false) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Pick. Date",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Pick. Time",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Inl. Date",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Inl. Time",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"#Desp.# Date",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"#Desp.# Time",0,DespatchRowTime,true,PasteCurTime);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Pick. Date",0,PickingDate,false,PasteCurDate);
    MatCol(t,-390,"Pick. Time",0,PickingTime,false,PasteCurTime);
    MatCol(t,-320,"Inl. Date",0,InloadingDate,true,PasteCurDate);
    MatCol(t,-230,"Inl. Time",0,InloadingTime,true,PasteCurTime);
    MatCol(t,-160,"#Desp.# Date",0,DespatchRowDate,true,PasteCurDate);
    MatCol(t,-70,"#Desp.# Time",0,DespatchRowTime,true,PasteCurTime);
  end;
  Flip(flipnr); flipnr = flipnr + 1;
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
  MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
  MatCol(t,-260,"Unit Qty",0,UnitFactQuant,true,0);
  MatCol(t,-200,"Width",0,UnitXval,true,0);
  MatCol(t,-160,"Height",0,UnitYval,true,0);
  MatCol(t,-120,"Depth",0,UnitZval,true,0);
  MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  InsertRowTest;
  DeleteRowTest;
  RowMenuBegin("");
  RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"ORLastSPrsm");
  end;
  RowMenuItem(0,"Add Header Line",' ',' ',0,"ORAddHeaderLine");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"ORAddHidLine");
  RowMenuItem(0,"Add Subtotal Line",' ',' ',0,"SubtotalORDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Manager's Discount Override",' ',' ',0,"MgrsDiscOverrideORDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18; VTab(-35,v,-16,v+vs,ToolFlip,1,"A");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,2,"B");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,3,"C");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,4,"D");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,5,"E");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,6,"F");
  v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,7,"G");
  if (StandardHansa==false) then begin
    v=v+vs;  VTab(-35,v,-16,v+vs,ToolFlip,8,"H");
  end;
  Tile(3,70,false,"3",FrRate);
  vs = 20;
  EditField(h=110,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  EditField(h,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
  EditField(h,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);  
  EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
  RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
  RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);   
  Tile(4,110,false,"4",ShipDeal);
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
  EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
  EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
  end;
  EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
  end;
  EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
  EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
  EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
  EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
  EditField(h2,v+=vs,80,"Intrastat Code",Normal,IntrastatTransCode,true,IntrastatTransCodeSClass);
  if (StandardHansa==false) then begin
    EditField(h3,v,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
  end;
  CheckBox(473,v=vm,0,"Invoice Before Delivery",InvBeforeShip);
  CheckBox(473,v+=16,0,"Set delivered quantity to Zero",SHShipSetToZero);
  Tile(5,130,false,"5",PriceList);
  h3 = 530;
  EditField(h1,v=vm,80,"Price List",Normal,PriceList,false,PLDefSClass);
  EditField(h1,v+=vs,80,"Discount Matrix",ViewOnly,RebCode,false,0);
//  EditField(h2,v+=vs,80,"Disc %",ViewOnly,DiscPerc,false,0);
//  EditField(h2,v+=vs,80,"Disc Amnt",ViewOnly,DiscSum,false,0);
  EditField(h1,v+=vs,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass);
  if (StandardHansa==false) then begin
    EditField(h1,v+=vs,80,"Credit Card",Normal,CreditCard,false,CreditCardSClass);
    EditField(h1,v+=vs,80,"#Authorisation#",Normal,AuthorizationCode,false,0);
  end;
  EditField(h1,v+=vs,-20,"Comment",Normal,Comment,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,Comment4,false,0);
  EditField(h1,v+=vs,-20,"Account Op.",Normal,BankCode,false,BankSClass);
  v = vm;
  if (HasSalesGroup) then begin
    EditField(h2,v,80,"Sales Group",Normal,SalesGroup,false,SalesGroupSClass);
    v = v + vs;
  end;
  EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass);
  if (StandardHansa==false) then begin
    EditField(h2,v+=vs,80,"Commission",Normal,Commision,true,0);
    EditField(h2,v+=vs,80,"Total Incl. Com.",ViewOnly,SumIncCom,true,0);
  end;
  if (HasTREO) then begin
    EditField(h3,v=vm,80,"TREO No.",Normal,TREONr,false,0);
    EditField(h3,v+=vs,80,"TREO Expiry Date",Normal,TREOExpDate,false,PasteCurDate);
  end;
  Tile(6,250,false,"6",Addr1);
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  EditField(h,vm=(v+=vs),80,"Country",Normal,InvCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h2-89,v,232,"",ViewOnly,InvCountryName,false,0);
    h5 = -170;
    width = 150;
  end else begin
    h5 = -270;
    width = 135;
  end;
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
/*  
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
*/    
    v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
  end else begin
    v = VATZoneButtonsLabelsENG(h3=290,v=vm+20,170,16);
  end;
  EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
  EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
  EditField(h2,v+=vs,150,"GLN",ViewOnly,RecipientGLN,false,0);
  EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
  EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  Tile(7,170,false,"7",ShipAddr0);
  if (StandardHansa==false) then begin
    EditField(h1,v=6,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
    EditField(h1,v+=vs,-20,"Delivery",Normal,ShipAddr0,false,0);
  end else begin
    EditField(h1,v=6,-20,"Delivery",Normal,ShipAddr0,false,0);
  end;
  EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
  EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
  EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
  EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
  if (HasLocalization("BRA")) then begin 
    EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0);
    h5 = -170;
    width = -20;
  end;  
  EditField(h2,v,150,"Delivery GLN",ViewOnly,DelRecipientGLN,false,0);
//  EditField(h1+200,v,80,"#VAT Code#",Normal,CustVATCode,false,0);
  EnterSkip(OrdDate);
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Order Status",'r',5,"ORInfoRnORDsm");
    SpecialMenu("Item Status",'I',2,"ItemStatusORDsm");
    SpecialMenu("Create Delivery",'L',0,"SHFromORDsm");
    SpecialMenu("Create Invoice",'F',1,"IVFromORDsm");
    SpecialMenu("Add Subtotal",' ',14,"SubtotalORDsm");
/*
email not working yet
    SpecialMenu("Create Email",'m',11,"CreateMailFromORDsm");
*/
  end else begin
  SpecialMenu("Recalculate Discount",' ',11,"RecalcDiscountORDsm");
  if (StandardHansa==false) then begin
    SpecialMenu("Recalculate Weight and Volume",' ',10,"RecalculateWeightORDsm");
  end;
  if (HasLocalization("CAN,USA")) then begin
    SpecialMenu("Get Tax Rates",' ',0,"ORGetTaxRates2Dsm");
  end;

  SpecialMenu("Update Currency Price List Items",' ',7,"UpdatePricesORDsm");
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  SpecialMenu("Order Status",'r',5,"ORInfoRnORDsm");
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixORDsm");
  end;
  if (StandardHansa==false) then begin
    SpecialMenu("Print Internal Order",' ',4,"Or2FormORDsm");
  end;
  SpecialMenu("Reservations",' ',15,"OrderReservORDsm");
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Sign",' ',10,"SignORDsm");
  end;
  
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
//  SpecialMenu("Activity",'c',9,"CreateActFromORDsm");
  SpecialMenu("Delivery",'L',0,"SHFromORDsm");
  if (HasDownpayments) then begin
    SpecialMenu("Down Payment Invoice",' ',3,"DownPayFromORDsm");
  end;
  if (HaseMail or IsEnterprise) then begin
    SpecialMenu("Email",'m',11,"CreateMailFromORDsm");
  end;
  SpecialMenu("Invoice",'F',1,"IVFromORDsm");
  if (HasModTS or IsEnterprise) then begin
    SpecialMenu("Project",' ',9,"CreatePRFromORDsm");
    SpecialMenu("Project Budget",' ',10,"CreateTBBUFromORDsm");
  end;
  SpecialMenu("Purchase Order",' ',4,"POFromORDsm");
  SpecialMenu("Returned Goods",'B',6,"RetFromORsm");
  SpecialMenu("#Stock# Movement",' ',8,"StockMovFromORDsm");
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"ORSendforAcceptanceORDsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecialMenu("Add Customer",' ',0,"AddCustomerORDsm");
  SpecialMenu("Add Item",' ',0,"AddItemORDsm");  
  end;
  EndWindow;
end;

window QTDClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h1,h2,h3,h4,h5,t,v,vm,vs,width;
  string 255 label;
  Integer f,flipnr,tilenr,rn;

  WindowBegin("Quotation",QTDClass,CGview,-);
  SetWRect(20,80,750,460);
  Sizeable(-1,-1,0,0);
  UseView(QTVc);
  ActiveFieldOnNew("CustCode");
  if (HasCommunicator) then begin
    CommunicateButton;
  end;
  Tile(0,74,false,"",CustCode);
  EditField(75,vm=(v=6),95,"No.",Normal,SerNr,false,TSerSClass);
  EditField(75,v+=20,95,"Customer",Normal,CustCode,false,LeadCUSClass);
  EnterSkip(PayDeal);
  EditField(h=255,v=vm,-40,"Name",Normal,Addr0,false,0);
  if (HasOfficialSerNr) then begin
    EditField(h,v+=20,150,"Official No.",ViewOnly,ProformaOfficialSerNr,ViewOnly,LegalInvNrSClass);
  end;
  tilenr = 1;
  TileButton(tilenr,"Terms"); tilenr = tilenr + 1;
  TileButton(tilenr,"Items"); tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    TileButton(tilenr,"Currency"); tilenr = tilenr + 1;
  end;
  if (IsEnterprise) then begin
    TileButton(tilenr,"Del. Terms"); tilenr = tilenr + 1;
  end;
//??
  if (HasPriceLists) then begin
    TileButton(tilenr,"Price List"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Comment"); tilenr = tilenr + 1;
  end;
  if (HasModSL) then begin
    TileButton(tilenr,"Inv. Address"); tilenr = tilenr + 1;
  end else begin
    TileButton(tilenr,"Address"); tilenr = tilenr + 1;
  end;
  if (HasModSO or HasModIN) then begin
    TileButton(tilenr,"Del. Address"); tilenr = tilenr + 1;
  end;
  if (HasModTS) then begin
    TileButton(tilenr,"Job Costing"); tilenr = tilenr + 1;
  end;
  tilenr = 1;
  Tile(tilenr,110,false,tilenr,QTDate); tilenr = tilenr + 1;
  vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -90;
  EditField(h1,vm=(v=6),82,"Date"  ,Normal,QTDate,false,PasteCurDate);
  EditField(h1,v+=vs,35,"Payment Terms",Normal,PayDeal,false,PDSClass);
  if (HasAdvancedCRM) then begin
    EditField(h1,v+=vs,82,"Valid Until",Normal,ValidUntilDate,false,PasteCurDate);
  end;
  EditField(h1,v+=vs,82,"Make Contact",Normal,MakeContactDate,false,PasteCurDate);
  EditField(h1,v+=vs,82,"Decision Date",Normal,RejectDate,false,PasteCurDate);
  EditField(h2,v=vm,135,"Our Reference",Normal,OurContact,false,0);
  EditField(h2,v+=vs,135,"Attention",Normal,CustContact,false,ContactSClass);
  EditField(h2,v+=vs,135,"Reference",Normal,RefStr,false,0);
  if (HasObjects) then begin
    EditField(h2,v+=vs,135,"Tags/Objects",Normal,Objects,false,ObjSClass);
  end;
  EditField(h2,v+=vs,70,"Apmokamas %",Normal,PPVal,false,0);// Edit ************************** BPI Ukraine - KramarAlexandr - 03, 16 01 2019 y. at 11:26:12 AM
  v = vm;
  if (HasSalesman or HasSalesmanBonus or HasStandardCRM) then begin
    EditField(h3,v,80,"#Salesman#",Normal,SalesMan,false,UserSClass); v = v + vs;
  end;
  if (HasModTS or IsEnterprise) then begin
    EditField(h3,v,80,"Project",Normal,PRCode,false,PRSClass); v = v + vs;
  end;
  EditField(h3,v,80,"Quotation Class",Normal,QuoteClass,false,QuoteClassSClass); v = v + vs;
  EditField(h3,v,80,"Probability %",Normal,Probability,false,0); v = v + vs;
  if (HasStandardCRM) then begin
    EditField(h3,v,80,"Priority",Normal,Priority,false,0); v = v + vs;
  end;
  ButtonFrame(h4,v=15,80,3,"Status");
  RadioButton(h4,v,0,0,"Open",Rejected);
  RadioButton(h4,v+=16,2,255,"Accepted",Rejected);
  RadioButton(h4,v+=16,1,255,"Rejected",Rejected);
  if (HasStandardCRM) then begin
    CheckBox(h4,v+=24,0,"Closed",Closed);
  end;
  EnterSkip(Math);
  Tile(tilenr,220,true,tilenr,Math);  tilenr = tilenr + 1;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(55,-41,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
  end;
  if (UseTaxTemplatesforTaxCalc==false) then begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(160,-41,70,"GP %",ViewOnly,GPProc,true,0);
      EditField(160,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    if (HasLocalization("GBR,LTU,POL,LVA")) then begin
      EditField(310,-41,50,"Reverse #VAT#",ViewOnly,RvrsVAT,true,0);
      EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
    end else begin
      if (HasExtTax) then begin
        EditField(290,-41,70,"TAX2",ViewOnly,TAX2Sum,true,0);
        EditField(290,-21,70,"Ext. Tax",ViewOnly,TAX1Sum,true,0);
      end;
    end;
    EditField(410,-41,100,"#VAT#",ViewOnly ,Sum3,true,0);
  end else begin
    if (UserCanAction("ViewCostPrice",true)) then begin
      EditField(290,-41,70,"GP %",ViewOnly,GPProc,true,0);
      EditField(290,-21,70,"Total GP",ViewOnly,TotGP,true,0);
    end;
    EditField(410,-41,100,"Tax",ViewOnly ,Sum3,true,0);
  end;
  if (HasMultiCurrency or HasBase2) then begin
    EditField(410,-21,100,"Base",ViewOnly,BaseSum4,true,0);
  end;
  EditField(-150,-41,100,"Subtotal",ViewOnly ,Sum1,true,0);
  EditField(-150,-21,100,"TOTAL",ViewOnly ,Sum4,true,0);
  v = 24;
  if (HasObjects or HasModNL) then begin
    MatrixBegin(3,v,-45,-49,-,200);
  end else begin
    MatrixBegin(3,v,-20,-49,-,200);
  end;
  MatTypedRow(stp);
  Flip(0);
  MatCol(t=1,32,"Item",0,ArtCode,false,ForSaleINSClass);
//  MatCol(t,94,"Var",0,VARList,true,VARSClass);
//  MatCol(t,144,"Qty",0,Quant,true,0);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  MatCol(t=kInvoiceRowTypeStructuredItemComponent,32,"Item",0,ArtCode,false,ForSaleINSClass);
  if (HasVarieties) then begin
    MatCol(t,94,"Qty",0,Quant,true,MATVARINSClass);
  end else begin
    MatCol(t,94,"Qty",0,Quant,true,0);
  end;
  EnterSkip(ArtCode);
  if (GuiType==kGuiiPhone) then begin
    MatCol(t=9,100,"Subtotal",0,Spec,false,0);
    MatCol(t,347,"Sum",0,Sum,true,0);
  end else begin
    MatText(t=9,32,"Subtotal",true);
    MatCol(t,100,"",0,Spec,false,0);
    MatCol(t,-80,"Sum",0,Sum,true,0);
  end;
  MatText(t=10,32,"This row and all rows below it will be hidden on printout",false);
  if (GuiType==kGuiiPhone) then begin
    MatCol(t=17,-300,"Header",0,Spec,false,0);
  end else begin
    MatText(t=17,32,"Header",true);
    MatCol(t,100,"",0,Spec,false,0);
  end;
  MatText(t=kInvoiceRowTypePerceptionTax,32,"Perception Tax",true);
  MatCol(t,132,"",0,Region,false,0);
  MatCol(t,252,"",0,TAX2Prc,true,0);
  MatCol(t,292,"",0,Sum,true,0);
  MatCol(t,372,"",0,SalesAcc,false,0);
  MatCol(t,452,"",0,Spec,false,0);
  flipnr = 1;
  Flip(flipnr); flipnr = flipnr + 1;
//  MatCol(t=1,194,"Description",0,Spec,false,0);
  t = 1;
  MatCol(t,144,"Description",0,Spec,false,0);
  if (HasModNL or HasObjects) then begin
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    MatCol(t,-135,"%",0,vRebate,true,0);
    MatCol(t,-100,"Sum",0,Sum,true,0);
    Flip(flipnr); flipnr = flipnr + 1;
    MatCol(t=1,144,"Description",0,Spec,false,0);
    if (UseTaxTemplatesforTaxCalc) then begin
      if (HasCustItem) then begin
        MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-164,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      if (HasCUstItem) then begin
        MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-184,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      if (HasLocalization("GBR,LTU,POL,LVA")) then begin
        MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
      end else begin
        MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;
    end;
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    if (UseTaxTemplatesforTaxCalc) then begin
      if (HasCustItem) then begin
        MatCol(t,-284,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-224,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-164,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      if (HasCustItem) then begin
        MatCol(t,-264,"Cust. Item No.",0,CustArtCode,false,CUINSClass);
      end;
      if (HasModNL) then begin
        MatCol(t,-184,"A/C",0,SalesAcc,false,AccSClass);
      end;
      if (HasObjects) then begin
        MatCol(t,-124,"Tags/Objects",0,Objects,false,ObjSClass);
      end;
      if ((HasLocalization("GBR,LTU,POL") and IsEnterprise) or HasLocalization("LVA")) then begin
        MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
      end else begin
        MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;
    end;
  end else begin
    if (UseTaxTemplatesforTaxCalc) then begin
      MatCol(t,-295,"Unit Price",0,Price,true,0);
      MatCol(t,-195,"%",0,vRebate,true,0);
      MatCol(t,-160,"Sum",0,Sum,true,0);
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
      MatCol(t,-295,"Unit Price",0,Price,true,0);
      MatCol(t,-195,"%",0,vRebate,true,0);
      MatCol(t,-160,"Sum",0,Sum,true,0);
      MatCol(t,-60,"T-Cd",0,TaxTemplateCode,false,TaxTemplateSClass);
    end else begin
      MatCol(t=1,-265,"Unit Price",0,Price,true,0);
      MatCol(t,-165,"%",0,vRebate,true,0);
      MatCol(t,-130,"Sum",0,Sum,true,0);
      MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
      MatCol(t,-265,"Unit Price",0,Price,true,0);
      MatCol(t,-165,"%",0,vRebate,true,0);
      MatCol(t,-130,"Sum",0,Sum,true,0);
      if ((HasLocalization("GBR,LTU,POL,LVA") and IsEnterprise) or HasLocalization("LVA")) then begin
        MatCol(t,-60,"#V-Cd#",0,VATCode,false,VATCodeSClass);
        MatCol(t,-30,"Rvrs",0,RvrsVATCode,false,VATCodeSClass);
      end else begin
        MatCol(t,-30,"#V-Cd#",0,VATCode,false,VATCodeSClass);
      end;
    end;
  end;
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    t = 1;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
      MatCol(t,-175,"%",0,vRebate,true,0);
      MatCol(t,-140,"Cost",0,BasePrice,true,0);
      MatCol(t,-70,"GP",0,rowGP,true,0);
    end else begin
      MatCol(t,-135,"%",0,vRebate,true,0);
      MatCol(t,-100,"Sum",0,Sum,true,0);
    end;
//  MatCol(t,-100,"FIFO",0,FIFO,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-235,"Unit Price",0,Price,true,0);
    if (UserCanAction("ViewCostPrice",true)) then begin
      MatCol(t,-175,"%",0,vRebate,true,0);
      MatCol(t,-140,"Cost",0,BasePrice,true,0);
      MatCol(t,-70,"GP",0,rowGP,true,0);
    end else begin
      MatCol(t,-135,"%",0,vRebate,true,0);
      MatCol(t,-100,"Sum",0,Sum,true,0);
    end;
  end;
//  MatCol(t,-100,"FIFO",0,FIFO,true,0);
  if (IsEnterprise) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    t = 1;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"#Salesmen#",0,Salesmen,false,UserSClass);
    MatCol(t,-280,"Invoiced",0,Invd,true,0);
    MatCol(t,-230,"Unit Price",0,Price,true,0);
    MatCol(t,-150,"Price Factor",0,PriceFactor,true,0);
    MatCol(t,-70,"Recipe",0,Recepy,false,RecSClass);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-340,"Unit Price",0,Price,true,0);
    MatCol(t,-262,"Price Factor",0,PriceFactor,true,0);
    MatCol(t,-170,"",0,MotherArtCode,false,0);
    MatCol(t,-100,"",0,RecipeQuant,false,0);
    MatCol(t,-70,"Recipe",0,Recepy,false,RecSClass);
    Flip(flipnr); flipnr = flipnr + 1;
    t = 1;
    MatCol(t,144,"Description",0,Spec,false,0);
    MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
    MatCol(t,-270,"Unit Qty",0,UnitFactQuant,true,0);
    MatCol(t,-215,"Width",0,UnitXval,true,0);
    MatCol(t,-170,"Height",0,UnitYval,true,0);
    MatCol(t,-125,"Depth",0,UnitZval,true,0);
    MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,144,"Description",0,Spec,false,0);
    MatCol(t,-315,"Unit",0,UnitCode,false,UnitSClass);
    MatCol(t,-270,"Unit Qty",0,UnitFactQuant,true,0);
    MatCol(t,-215,"Width",0,UnitXval,true,0);
    MatCol(t,-170,"Height",0,UnitYval,true,0);
    MatCol(t,-125,"Depth",0,UnitZval,true,0);
    MatCol(t,-80,"Unit Pr.of Unit",0,UnitFactPrice,true,0);
  end;
  if (HasModTS) then begin
    Flip(flipnr); flipnr = flipnr + 1;
    if (IsEnterprise) then begin
      MatCol(t=1,-490,"Phase",0,PRStage,false,PRStageSClass);
    end;
    MatCol(t=1,-440,"Person",0,EMCode,false,UserSClass);
    if (IsEnterprise) then begin
      MatCol(t,-390,"Group",0,JobGroup,false,EGSClass);
      MatCol(t,-340,"Time Class",0,TimeClass,false,TimeClassSClass);
    end;
    MatCol(t,-280,"Markup",0,Markup,true,0);
    MatCol(t,-230,"Type",0,BudType,true,SetSClass);
    MatCol(t,-190,"Inv. After",0,InvAfter,true,PasteCurDate);
    MatCol(t,-120,"Inv. Date",0,InvDate,true,PasteCurDate);
    MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
    MatCol(t=kInvoiceRowTypeStructuredItemComponent,-490,"Phase",0,PRStage,false,PRStageSClass);
    MatCol(t,-440,"Person",0,EMCode,false,UserSClass);
    if (IsEnterprise) then begin
      MatCol(t,-390,"Group",0,JobGroup,false,EGSClass);
      MatCol(t,-340,"Time Class",0,TimeClass,false,TimeClassSClass);
    end;
    MatCol(t,-270,"Markup",0,Markup,true,0);
    MatCol(t,-220,"Type",0,BudType,true,SetSClass);
    MatCol(t,-170,"Inv. After",0,InvAfter,true,PasteCurDate);
    MatCol(t,-110,"Inv. Date",0,InvDate,true,PasteCurDate);
    MatCol(t,-50,"Inv. No.",0,Invoiced,true,0);
  end;
  DeleteRowTest;
  InsertRowTest;
  RowMenuBegin("");
  if (HasModIN) then begin
    RowMenuItem(0,"Item Status",'I','I',0,"ItemStatusQTDsm");
  end;
  RowMenuItem(0,"Previous Sales Prices",' ',' ',0,"QTLastSPrsm");
  RowMenuItem(0,"Add Header Line",' ',' ',0,"QTAddHeaderLine");
  RowMenuItem(0,"Add Hidden Line",' ',' ',0,"QTAddHidLine");
  RowMenuItem(0,"Add Subtotal Line",' ',' ',0,"SubtotalQTDsm");
  if (StandardHansa==false) then begin
    RowMenuItem(0,"Manager's Discount Override",' ',' ',0,"MgrsDiscOverrideQTDsm");
  end;
  EndRowMenu;
  EndMatrix;
  vs = 20;
  v = 18;
  if (flipnr>2) then begin
    for (f=1;f<flipnr;f=f+1) begin
      VTab(-31,v,-12,v+vs,ToolFlip,f,chr(asc("A") + f - 1));
      v = v + vs;
    end;
  end;

  if (HasMultiCurrency or HasBase2) then begin
    Tile(tilenr,70,false,tilenr,FrRate);  tilenr = tilenr + 1;
    vs = 20;
    if (HasBase2) then begin
      h1 = h1 + 20;
    end;
    EditField(h1,v=6,50,"Currency",Normal,CurncyCode,false,CurncyCodeSClass);
    if (HasMultiCurrency) then begin
      if (HasBase2) then begin
        EditField(h1,v+vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      end else begin
        EditField(h1,v+vs,50,"Base Currency",Normal,BaseRate1,true,0);
      end;
      if (HasBase2) then begin  
        EditField(h1,v+(vs*2),50,"Base Currency 2",Normal,BaseRate2,true,0);
      end;
      EditField(h2=295,v,50,"Rate",Normal,FrRate,true,0);
      if (HasBase2) then begin  
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency 1",false);
        RateField(h3,v+=vs,50,":",Normal,"ToRateB2",true,h3+60,v+14,"Base Currency 2",false);          
      end else begin
        RateField(h3=360,v,50,":",Normal,"ToRateB1",true,h3+60,v+14,"Base Currency",false);    
      end;    
    end else begin
      EditField(h1,v+=vs,50,"Base Currency 1",Normal,BaseRate1,true,0);
      EditField(h1,v+=vs,50,"Base Currency 2",Normal,BaseRate2,true,0);
    end;
  end;
  if (IsEnterprise) then begin
    Tile(tilenr,110,false,tilenr,ShipDeal);  tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    EditField(h1,v=6,80,"Delivery Terms",Normal,ShipDeal,false,ShipDealSClass);
    EditField(h1,v+=vs,80,"Delivery Mode",Normal,ShipMode,false,DMSClass);
    if (HasRoute) then begin
      EditField(h1,v+=vs,80,"Route",Normal,Sorting,false,DelRouteSClass);
    end;
    EditField(h1,v+=vs,80,"Location",Normal,Location,false,LocationSClass);
    if (StandardHansa==false) then begin
      EditField(h1,v+=vs,80,"Branch",Normal,BranchID,false,AllCUSClass);
    end;
    EditField(h1,v+=vs,80,"Opportunity",ViewOnly,OYNr,false,0);
    EditField(h2,v=vm,80,"Total Quantity",ViewOnly,TotQty,true,0);
    EditField(h2,v+=vs,80,"Total Weight",ViewOnly,TotWeight,true,0);
    EditField(h2,v+=vs,80,"Total Volume",ViewOnly,TotVolume,true,0);
    EditField(h2,v+=vs,80,"Freight",Normal,FrPrice,true,0);
    EditField(h2,v+=vs,80,"Cont. Start Date",Normal,ContractStartDate,true,0);
    EditField(h2,v+=vs,-40,"Opp. Comment",Normal,OYDescription,false,0);
    EditField(h3,v=vm,80,"Order No.",Normal,OrderNr,false,0);
    EditField(h3,v+=vs,80,"Planned Delivery",Normal,PlanShip,false,PasteCurDate);
    EditField(h3,v+=vs,80,"Days to Delivery",Normal,DaysToDelivery,false,0);
//    EditField(h3,v+=vs,80,"Intrastat Transaction Code",Normal,IntrastatTransCode,false,IntrastatTransCodeSClass);
    EditField(h3,v+=vs,80,"Freight #V-Cd#",Normal,FrVATCode,true,VATCodeSClass);
    CheckBox(h3-30,v+=20,0,"Disallow Invoicing more than Quoted",DisallowInvoicemorethanQuoted);
  end;
  if (HasPriceLists) then begin
    Tile(tilenr,110,false,tilenr,PriceList);  tilenr = tilenr + 1;
    v = vm;
    if (HasPriceLists) then begin
      EditField(h1,v,80,"Price List",Normal,PriceList,false,PLDefSClass);
      if (IsEnterprise==false and HasLanguages) then begin
        EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass);
      end;
      v = v + vs;
    end else begin
      if (IsEnterprise==false and HasLanguages) then begin
        EditField(h1,v,80,"Language",Normal,LangCode,false,LangSClass); v = v + vs;
      end;
    end;
    if (HasAdvancedPricing) then begin
      if (IsEnterprise==false) then begin vm = v; end;
      EditField(h1,v,80,"Discount Matrix",Normal,RebCode,false,RebSClass); v = v + vs;
    end;
    if (IsEnterprise) then begin
      EditField(h1,v,80,"Invoice To",Normal,InvoiceToCode,false,CUSClass); v = v + vs;
      if (StandardHansa) then begin
        EditField(h1,v,80,"Original Customer",Normal,OrgCust,false,AllCUSClass);
        EditField(h2,v,80,"Language",Normal,LangCode,false,LangSClass); v = v + vs;
      end else begin
        EditField(h1,v,80,"Original Customer",Normal,OrgCust,false,AllCUSClass); v = v + vs;
      end;
    end;
  end else begin
    Tile(tilenr,110,false,tilenr,Comment);  tilenr = tilenr + 1;
    v = vm;
  end;
  EditField(h1,v,-20,"Comment",Normal,Comment,false,0); v = v + vs;
  if (HasModSVO or IsEnterprise) then begin
    EditField(h1,v,-20,"",Normal,Comment2,false,0); v = v + vs;
    EditField(h1,v,-20,"",Normal,Comment3,false,0); v = v + vs;
    EditField(h1,v,-20,"",Normal,Comment4,false,0); v = v + vs;
  end;
  if (IsEnterprise) then begin  
    v = vm; 
  end else begin
    if (HasAdvancedPricing==false) then begin
      h2 = h1;
    end;
  end;
  if (HasSalesMan and StandardHansa==false) then begin
    EditField(h2,v=vm,80,"Sales Group",ViewOnly,SalesGroup,false,SalesGroupSClass);
    if ((HasLanguages and HasPriceLists==false) or IsEnterprise) then begin
      EditField(h2,v+=vs,80,"Language",Normal,LangCode,false,LangSClass);
  end;
  end;  
  if (HasExtTax) then begin
    EditField(h2,v+=vs,80,"Tax Sum",ViewOnly,TAX1Sum,true,0);
  end;
  if (HasModSVO) then begin
    EditField(h2,v+=vs,80,"Serv. Ord. No.",ViewOnly,SVOSerNr,true,0);
  end;
  Tile(tilenr,250,false,tilenr,Addr1);  tilenr = tilenr + 1;
  label = UserDefined("CUVc","InvAddr0");
  if (blank(label)) then begin label = "Invoice"; end;
  EditField(h=110,v=6,-20,label,Normal,Addr1,false,0);
  label = UserDefined("CUVc","InvAddr1");
  if (blank(label)) then begin label = "Address"; end;
  EditField(h,v+=vs, -20,label,Normal,Addr2,false,0);
  label = UserDefined("CUVc","InvAddr2");
  EditField(h,v+=vs, -20,label,Normal,Addr3,false,0);
  label = UserDefined("CUVc","InvAddr3");
  EditField(h,v+=vs, -20,label,Normal,InvAddr3,false,0);
  label = UserDefined("CUVc","InvAddr4");
  EditField(h,v+=vs, -20,label,Normal,InvAddr4,false,0);
  h5 = 290; width = 135; 
  if (HasCountryPerCustomer) then begin
    EditField(h,vm=(v+=vs),50,"Country",Normal,InvCountry,false,CountrySClass);
    if (HasLocalization("BRA")) then begin 
      EditField(h1+61,v,232,"",ViewOnly,InvCountryName,false,0);
      h5 = -170;
      width = -20;
    end;
  end;
  if (IsEnterprise) then begin
    EditField(h,v+=vs,width,"Account Op.",Normal,BankCode,false,BankSClass);
    vm = v;
  end else begin
    if (HasApprovals==false) then begin
      vm = v+2*vs;
    end;
  end;
  if (HasApprovals) then begin
    SoftEditField(h3=h+4,v=(vm+=40),123,"Approval Status",ViewOnly,"AcceptanceStatusFlag",false,0,M4Str,255);
  end;
/*
//oldapprovals  
  if (HasApprovals) then begin
    ButtonFrame(h3=h+4,v=(vm+=40),123,6,"Approval Status");
    RadioButton(h3,v,kAcceptanceStateNotRequired,0,"Not Required",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotStarted,0,"Not Started",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateNotRequested,0,"Not Reuested",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStatePending,0,"Pending",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateApproved,0,"Approved",AcceptanceStatus);
    RadioButton(h3,v+=16,kAcceptanceStateRejected,0,"Rejected",AcceptanceStatus);
  end;
*/  
  if (HasVATZone) then begin
    if (StandardHansa==false) then begin
      v = VATZoneButtonsLabelsENG(h3=290,v=vm,170,16);
    end else begin
      v = VATZoneButtonsLabelsENG(h3=290,v=vm+40,170,16);
    end;
  end;
  if (IsEnterprise) then begin
    EditField(h2=-170,v=vm,150,"Region",Normal,Region,false,RegionSClass);
    EditField(h2,v+=vs,150,"#VAT Reg. No.#",Normal,VATNr,false,0);
    EditField(h2,v+=vs,150,"Telephone",Normal,Phone,false,0);
    EditField(h2,v+=vs,150,"Fax",Normal,Fax,false,0);
  end;
  if (HasModSO or HasModIN) then begin
    v = 6; h1 = 110;
    Tile(tilenr,170,false,tilenr,ShipAddr0);  tilenr = tilenr + 1;
    if (IsEnterprise and StandardHansa==false) then begin
      EditField(h1,v,80,"Address Code",Normal,DelAddrCode,false,DelAddr3SClass);
      v = v + vs;
    end;
    EditField(h1,v,-20,"Delivery",Normal,ShipAddr0,false,0);
    EditField(h1,v+=vs,-20,"Address",Normal,ShipAddr1,false,0);
    EditField(h1,v+=vs,-20,"",Normal,ShipAddr2,false,0);
    EditField(h1,v+=vs,-20,"",Normal,ShipAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr3,false,0);
    EditField(h1,v+=vs,-20,"",Normal,DelAddr4,false,0);
    if (HasCountryPerCustomer) then begin
      EditField(h1,v+=vs,80,"Country",Normal,DelCountry,false,CountrySClass);
      if (HasLocalization("BRA")) then begin 
        EditField(h1+91,v,232,"",ViewOnly,DelCountryName,false,0); v = v + vs;
      end;      
    end;
    EnterSkip(QTDate);
  end;
  if (HasModTS) then begin
    Tile(tilenr,115,false,tilenr,Markup);  tilenr = tilenr + 1;
    vs = 20; h1 = 110; h2 = 290; h3 = 530; h4 = -100;
    if (IsEnterprise) then begin
      ButtonFrame(h1,v=18,120,2,"Invoice Time");
      RadioButton(h1,v,0,0,"Actual",BudTime);
      RadioButton(h1,v+=16,1,255,"As Quoted",BudTime);

      ButtonFrame(h1,v+=40,120,2,"Invoice Purchases");
      RadioButton(h1,v,0,0,"Actual",BudOther);
      RadioButton(h1,v+=16,1,255,"As Quoted",BudOther);

      ButtonFrame(h2,v=18,120,2,"Invoice Material");
      RadioButton(h2,v,0,0,"Actual",BudMaterial);
      RadioButton(h2,v+=16,1,255,"As Quoted",BudMaterial);

      ButtonFrame(h2,v+=40,120,2,"Invoice #Stocked# Items");
      RadioButton(h2,v,0,0,"Actual",BudStocked);
      RadioButton(h2,v+=16,1,255,"As Quoted",BudStocked);
    end else begin
      ButtonFrame(h1,v=18,120,2,"Invoice");
      RadioButton(h1,v,0,0,"Actual",BudOther);
      RadioButton(h1,v+=16,1,255,"As Quoted",BudOther);
    end;

    EditField(h3,v=6,80,"Markup",Normal,Markup,false,0);
    if (IsEnterprise) then begin
      EditField(h3,v+=vs,80,"Total Time",Normal,SumTime,false,0);
      EditField(h3,v+=vs,80,"Total Purchases",Normal,SumOther,false,0);
      EditField(h3,v+=vs,80,"Total Materials",Normal,SumMaterial,false,0);
      EditField(h3,v+=vs,80,"Total #Stocked#",Normal,SumStocked,false,0);
    end else begin
      EditField(h3,v+=vs,80,"Total",Normal,SumOther,false,0);
    end;
  end;
  if (GuiType==kGuiMetro) then begin // Temporarily disabled on Windows 8
    SpecialMenu("Quotation Status",'r',3,"QTStatusDsm");
    if (HasModIN) then begin
      SpecialMenu("Item Status",'I',1,"ItemStatusQTDsm");
    end;
/*email not working yet
    if (HaseMail) then begin
      SpecialMenu("Create email",'m',12,"CreateMailFromQTDsm");
    end;
*/
    SpecialMenu("Add Subtotal",' ',4,"SubtotalQTDsm");
    if (HasCustomerStatusReport) then begin 
      SpecialMenu("Customer Status",'e',2,"CUStatusQTDsm");
    end;
    SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
    if (HasModSO) then begin
      SpecialMenu("Order",'G',9,"ORFromQTDsm");
    end;
    if (HasModSL) then begin
      SpecialMenu("Invoice",'F',10,"IVFromQTDsm");
    end;
  end else begin
  SpecialMenu("Item Search",'f',1,"ItemSearchDsm");
  if (HasCustomerStatusReport) then begin
    SpecialMenu("Customer Status",'e',2,"CUStatusQTDsm");
  end;
  SpecialMenu("Quotation Status",'r',3,"QTStatusDsm");
  if (IsEnterprise) then begin
    if (HasLocalization("CAN,USA")) then begin
      SpecialMenu("Get Tax Rates",' ',0,"QTGetTaxRates2Dsm");
    end;
    if (StandardHansa==false) then begin
      if (HasLocalization("AGO,PRT")) then begin
        SpecialMenu("Print Proforma Invoice",' ',4,"PrintProformaInvoiceQTDsm");
      end;
    end;
    SpecialMenu("Recalculate Discount",' ',6,"RecalcDiscountQTDsm");
    if (StandardHansa==false) then begin
      SpecialMenu("Recalculate Weight and Volume",' ',7,"RecalcWeightQTDsm");
    end;
  end else begin
    if (HasAvalara) then begin
      SpecialMenu("Get Tax Rates",' ',0,"QTGetTaxRates2Dsm");
    end;
    if (HasLocalization("AGO,PRT") and HasStandardCRM==false) then begin
      SpecialMenu("Print Proforma Invoice",' ',4,"PrintProformaInvoiceQTDsm");
    end;
  end;    
  if (GuiType==kGuiiPhone) then begin
    SpecialMenu("Sign",' ',10,"SignQTDsm");
  end;
  if (HasAdvancedPricing and (HasMultiCurrency or HasBase2)) then begin
    SpecialMenu("Update Currency Price List Items",' ',8,"UpdatePricesQTDsm");
  end;
  if (HasTaxMatrix) then begin
    SpecialMenu("Open Tax Matrix",' ',25,"OpenVatMatrixQTDsm");
  end;
  if (StandardHansa==false) then begin
    SpecialMenu("Manager's Discount Override",' ',24,"MgrsDiscOverrideQTDsm");
  end;
  if (HasApprovals) then begin
    SpecialMenu("Request Approval",' ',6,"QTSendforAcceptanceQTDsm");
    SpecialMenu("Cancel Approval Request",' ',2,"CancelApprovalRequestDsm");
  end;
  SpecMenuGroup("",kSpecMenuGroupTypeExtendedPlusMenu,0);
  if (HasModSO or IsSberbankProduct) then begin
    SpecialMenu("Order",'G',9,"ORFromQTDsm");
  end;
  if (HasStandardCRM==false) or (HasModSL) then begin
    SpecialMenu("Invoice",'F',10,"IVFromQTDsm");
  end;
  if (HasModPOS) then begin
    if (HasLocalization("PRT")==false) then begin
      SpecialMenu("POS Invoice",'f',10,"IVCashFromQTDsm");
    end;
  end;
  if (HasStandardCRM) then begin
//    SpecialMenu("Activity",'c',11,"CreateActFromQTDsm");
  end;
  if (HaseMail or IsEnterprise) then begin
    SpecialMenu("Email",'m',12,"CreateMailFromQTDsm");
  end;
  if (HasModTS or IsEnterprise) then begin
    SpecialMenu("Project",' ',13,"CreatePRFromQT");
    SpecialMenu("Project Budget",' ',14,"CreateTBBUFromQTDsm");
  end;
  if (HasModSVO) then begin
    SpecialMenu("Work Sheet",'',14,"WSFromQTDsm");
  end;
  if (HasModCredMan) then begin
    SpecialMenu("Credit Agreement",' ',15,"CreateCredManQTsm");
  end;
  end;
  SpecialMenu("Add Customer",' ',0,"AddCustomerQTDsm");
  SpecialMenu("Add Item",' ',0,"AddItemQTDsm");  
  EndWindow;
end;



window AccSVOTClass:1
  wtag("language","ENG"), wtag("product","*"), wtag("productcode","*"), wtag("device","computer")
begin
  real h,h2,l,v,vs;
  WindowBegin("Account Usage Service Order",AccSVOTClass,CGSbl,SVOAccType);
  SetBlid(SVOAccBlock);
  SetWRect(20,80,430,360);
  vs = 20; h = 180; l = 70; h2 = 100;
  /* Not used anywere
  EditField(h,v=6,l,"Sales Account",Normal,SalesAcc,false,AccSClass);
  EditField(h,v+=vs,l,"#Stock# Account",Normal,StockAcc,false,AccSClass);//703
  EditField(h,v+=vs,l,"Service Account",Normal,ServiceAcc,false,AccSClass);
  ButtonFrame(h2,v+=46,150,2,"Invoice order");
  RadioButton(h2,v,0,0,"Service Order",InvoiceSVO);
  RadioButton(h2,v+=16,1,0,"Work Sheets",InvoiceSVO);
  CheckBox(h2,v+=30,0,"Text from Service Order",SVOText);
  */
  CheckBox(h2,v+=16,0,"Work Sheet Tag/Object on Invoice",WSHeaderObjectOnSVOIV);
  CheckBox(h2,v+=16,0,"Work Sheet Update #Stock#",WSUpdStockFlag);
  CheckBox(h2,v+=16,0,"Allow only 1 main item per Service Order",AllowOneMainItem);
  EditField(h2+50,v+=20,50,"Service Tag / Object type",Normal,ObjTypePrefix,false,OTSClass);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 08 02 2019 y. at 9:30:57 AM
  CheckBox(h2,v+=20,0,"Automatically Create Service Order Tags/Objects",OutoObjCreate);// Edit ************************** BPI Ukraine - KramarAlexandr - 05, 08 02 2019 y. at 9:32:22 AM
  
  EndWindow;
end;